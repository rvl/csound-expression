[("adsyn",("Output is an additive set of individually controlled sinusoids, using an oscillator bank.","Output is an additive set of individually controlled sinusoids, using an oscillator bank.")),("adsynt",("Performs additive synthesis with an arbitrary number of partials, not necessarily harmonic.","Performs additive synthesis with an arbitrary number of partials, not necessarily harmonic.")),("adsynt2",("Performs additive synthesis with an arbitrary number of partials -not necessarily harmonic- with interpolation.","Performs additive synthesis with an arbitrary number of partials, not necessarily harmonic. (see adsynt for detailed manual)")),("hsboscil",("An oscillator which takes tonality and brightness as arguments.","An oscillator which takes tonality and brightness as arguments, relative to a base frequency.")),("lfo",("A low frequency oscillator of various shapes.","A low frequency oscillator of various shapes.")),("oscbnk",("Mixes the output of any number of oscillators.","This unit generator mixes the output of any number of oscillators. The frequency, phase, and amplitude of each oscillator can be modulated by two LFOs (all oscillators have a separate set of LFOs, with different phase and frequency); additionally, the output of each oscillator can be filtered through an optional parametric equalizer (also controlled by the LFOs).  This opcode is most useful for rendering ensemble (strings, choir, etc.) instruments.")),("oscil",("A simple oscillator.","oscil reads table ifn sequentially and repeatedly at a frequency xcps. The amplitude is scaled by xamp.")),("oscil3",("A simple oscillator with cubic interpolation.","oscil3 reads table ifn sequentially and repeatedly at a frequency xcps. The amplitude is scaled by xamp. Cubic interpolation is applied for table look up from internal phase values.")),("oscili",("A simple oscillator with linear interpolation.","oscili reads table ifn sequentially and repeatedly at a frequency xcps. The amplitude is scaled by xamp. Linear interpolation is applied for table look up from internal phase values.")),("oscilikt",("A linearly interpolated oscillator that allows changing the table number at k-rate.","oscilikt is very similar to oscili, but allows changing the table number at k-rate. It is slightly slower than oscili (especially with high control rate), although also more accurate as it uses a 31-bit phase accumulator, as opposed to the 24-bit one used by oscili.")),("osciliktp",("A linearly interpolated oscillator that allows allows phase modulation.","osciliktp allows phase modulation (which is actually implemented as k-rate frequency modulation, by differentiating phase input). The disadvantage is that there is no amplitude control, and frequency can be varied only at the control-rate. This opcode can be faster or slower than oscilikt, depending on the control-rate.")),("oscilikts",("A linearly interpolated oscillator with sync status that allows changing the table number at k-rate.","oscilikts is the same as oscilikt. Except it has a sync input that can be used to re-initialize the oscillator to a k-rate phase value. It is slower than oscilikt and osciliktp.")),("osciln",("Accesses table values at a user-defined frequency.","Accesses table values at a user-defined frequency. This opcode can also be written as oscilx.")),("oscils",("A simple, fast sine oscillator","Simple, fast sine oscillator, that uses only one multiply, and two add operations to generate one sample of output, and does not require a function table.")),("poscil",("High precision oscillator.","High precision oscillator.")),("poscil3",("High precision oscillator with cubic interpolation.","High precision oscillator with cubic interpolation.")),("vibr",("Easier-to-use user-controllable vibrato.","Easier-to-use user-controllable vibrato.")),("vibrato",("Generates a natural-sounding user-controllable vibrato.","Generates a natural-sounding user-controllable vibrato.")),("buzz",("Output is a set of harmonically related sine partials.","Output is a set of harmonically related sine partials.")),("gbuzz",("Output is a set of harmonically related cosine partials.","Output is a set of harmonically related cosine partials.")),("mpulse",("Generates a set of impulses.","Generates a set of impulses of amplitude kamp separated by kintvl seconds (or samples if kintvl is negative).  The first impulse is generated after a delay of ioffset seconds.")),("squinewave",("A mostly bandlimited shape-shifting square-pulse-saw-sinewave oscillator with hardsync.","This oscillator generates a variable shape waveform that can morph freely between classical shapes sine, square, pulse and saw.\nThe shape is controlled by two interacting values: clip (squareness) and \"skew\" (symmetry).\nAll shapes use a minimum number of samples per transition (ie, the sharp end of a saw or a pulse uses minimum N samples), this makes output bandlimited.\nAt higher frequency, the minimum sweep rate takes over, so over a certain pitch all shapes \"degrade\" to sinewave. The minimum sweep rate is i-time configurable.\nHardsync (a very quick sweep to phase=0) is supported, and a sync signal is output once per cycle.")),("vco",("Implementation of a band limited, analog modeled oscillator.","Implementation of a band limited, analog modeled oscillator, based on integration of band limited impulses. vco can be used to simulate a variety of analog wave forms.")),("vco2",("Implementation of a band-limited oscillator using pre-calculated tables.","vco2 is similar to vco. But the implementation uses pre-calculated tables of band-limited waveforms (see also GEN30) rather than integrating impulses. This opcode can be faster than vco (especially if a low control-rate is used) and also allows better sound quality. Additionally, there are more waveforms and oscillator phase can be modulated at k-rate. The disadvantage is increased memory usage. For more details about vco2 tables, see also vco2init and vco2ft.")),("vco2ft",("Returns a table number at k-time for a given oscillator frequency and wavform.","vco2ft returns the function table number to be used for generating the specified waveform at a given frequency. This function table number can be used by any Csound opcode that generates a signal by reading function tables (like oscilikt). The tables must be calculated by vco2init before vco2ft is called and shared as Csound ftables (ibasfn).")),("vco2ift",("Returns a table number at i-time for a given oscillator frequency and wavform.","vco2ift is the same as vco2ft, but works at i-time. It is suitable for use with opcodes that expect an i-rate table number (for example, oscili).")),("vco2init",("Calculates tables for use by vco2 opcode.","vco2init calculates tables for use by vco2 opcode. Optionally, it is also possible to access these tables as standard Csound function tables. In this case, vco2ft can be used to find the correct table number for a given oscillator frequency.")),("crossfm",("Two mutually frequency and/or phase modulated oscillators.","Two oscillators, mutually frequency and/or phase modulated by each other.")),("crossfmi",("Two mutually frequency and/or phase modulated oscillators.","Two oscillators, mutually frequency and/or phase modulated by each other.")),("crosspm",("Two mutually frequency and/or phase modulated oscillators.","Two oscillators, mutually frequency and/or phase modulated by each other.")),("crosspmi",("Two mutually frequency and/or phase modulated oscillators.","Two oscillators, mutually frequency and/or phase modulated by each other.")),("crossfmpm",("Two mutually frequency and/or phase modulated oscillators.","Two oscillators, mutually frequency and/or phase modulated by each other.")),("crossfmpmi",("Two mutually frequency and/or phase modulated oscillators.","Two oscillators, mutually frequency and/or phase modulated by each other.")),("fmb3",("Uses FM synthesis to create a Hammond B3 organ sound.","Uses FM synthesis to create a Hammond B3 organ sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesizer.")),("fmbell",("Uses FM synthesis to create a tublar bell sound.","Uses FM synthesis to create a tublar bell sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesizer.")),("fmmetal",("Uses FM synthesis to create a \226\128\156Heavy Metal\226\128\157 sound.","Uses FM synthesis to create a \226\128\156Heavy Metal\226\128\157 sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesizer.")),("fmpercfl",("Uses FM synthesis to create a percussive flute sound.","Uses FM synthesis to create a percussive flute sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesizer.")),("fmrhode",("Uses FM synthesis to create a Fender Rhodes electric piano sound.","Uses FM synthesis to create a Fender Rhodes electric piano sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesizer.")),("fmvoice",("FM Singing Voice Synthesis","FM Singing Voice Synthesis")),("fmwurlie",("Uses FM synthesis to create a Wurlitzer electric piano sound.","Uses FM synthesis to create a Wurlitzer electric piano sound. It comes from a family of FM sounds, all using 4 basic oscillators and various architectures, as used in the TX81Z synthesizer.")),("foscil",("A basic frequency modulated oscillator.","A basic frequency modulated oscillator.")),("foscili",("Basic frequency modulated oscillator with linear interpolation.","Basic frequency modulated oscillator with linear interpolation.")),("diskgrain",("Synchronous granular synthesis, using a soundfile as source.","diskgrain implements synchronous granular synthesis. The source sound for the grains is obtained by reading a soundfile containing the samples of the source waveform.")),("fof",("Produces sinusoid bursts useful for formant and granular synthesis.","Audio output is a succession of sinusoid bursts initiated at frequency xfund with a spectral peak at xform. For xfund above 25 Hz these bursts produce a speech-like formant with spectral characteristics determined by the k-input parameters. For lower fundamentals this generator provides a special form of granular synthesis.")),("fof2",("Produces sinusoid bursts including k-rate incremental indexing with each successive burst.","Audio output is a succession of sinusoid bursts initiated at frequency xfund with a spectral peak at xform. For xfund above 25 Hz these bursts produce a speech-like formant with spectral characteristics determined by the k-input parameters. For lower fundamentals this generator provides a special form of granular synthesis.")),("fog",("Audio output is a succession of grains derived from data in a stored function table","Audio output is a succession of grains derived from data in a stored function table ifna. The local envelope of these grains and their timing is based on the model of fof synthesis and permits detailed control of the granular synthesis.")),("grain",("Generates granular synthesis textures.","Generates granular synthesis textures.")),("grain2",("Easy-to-use granular synthesis texture generator.","Generate granular synthesis textures. grain2 is simpler to use, but grain3 offers more control.")),("grain3",("Generate granular synthesis textures with more user control.","Generate granular synthesis textures. grain2 is simpler to use but grain3 offers more control.")),("granule",("A more complex granular synthesis texture generator.","The granule unit generator is more complex than grain, but does add new possibilities.")),("partikkel",("Granular synthesizer with \"per grain\" control\n      over many of its parameters.  Has a sync input to\n      sychronize its internal grain scheduler clock to an external\n      clock source.","partikkel was conceived after reading Curtis Roads' book\n      \"Microsound\", and the goal was to create an opcode that was\n      capable of all time-domain varieties of granular synthesis\n      described in this book. The idea being that most of the\n      techniques only differ in parameter values, and by having a\n      single opcode that can do all varieties of granular synthesis\n      makes it possible to interpolate between techniques. Granular synthesis is sometimes dubbed particle\n      synthesis, and it was thought apt to name the opcode partikkel\n      to distinguish it from other granular opcodes.")),("partikkelget",("Get mask index for a specific mask parameter of a running partikkel instance.","partikkelget is an opcode for outputting partikkel mask index for a specific parameter. \n      Used together with partikkelset, it can be used to synchronize partikkel masking between several running instances of the  partikkel opcode. \n      It can also be used to control other processes based on the internal mask index, for example to create more complex masking patterns than is available with the regular grain masking system.")),("partikkelset",("Set mask index for a specific mask parameter of a running partikkel instance.","partikkelset is an opcode for setting the partikkel mask index for a specific parameter. \n      Used together with partikkelget, it can be used to synchronize partikkel masking between several running instances of the  partikkel opcode. \n      It can also be used to set the internal mask index basaed on other processes, for example to create more complex masking patterns than is available with the regular grain masking system.")),("partikkelsync",("Outputs partikkel's grain\n      scheduler clock pulse and phase to synchronize several instances of the partikkel\n      opcode to the same clock source.","partikkelsync is an opcode for outputting partikkel's grain scheduler clock pulse and phase. partikkelsync's output can be used to synchronize other instances of the partikkel opcode to the same clock.")),("sndwarp",("Reads a mono sound sample from a table and applies time-stretching and/or pitch modification.","sndwarp reads sound samples from a table and applies time-stretching and/or pitch modification. Time and frequency modification are independent from one another. For example, a sound can be stretched in time while raising the pitch!")),("sndwarpst",("Reads a stereo sound sample from a table and applies time-stretching and/or pitch modification.","sndwarpst reads stereo sound samples from a table and applies time-stretching and/or pitch modification. Time and frequency modification are independent from one another. For example, a sound can be stretched in time while raising the pitch!")),("syncgrain",("Synchronous granular synthesis.","syncgrain implements synchronous granular synthesis. The source sound for the\ngrains is obtained by reading a function table containing the samples of the source waveform. \nFor sampled-sound sources, GEN01 is used.\nsyncgrain will accept deferred allocation tables.")),("syncloop",("Synchronous granular synthesis.","syncloop is a variation on syncgrain,\nwhich implements synchronous granular synthesis. \nsyncloop adds loop start and end points and an optional start position. Loop start\nand end control grain start positions, so the actual grains can go beyond the loop\npoints (if the loop points are not at the extremes of the table), enabling\nseamless crossfading. For more information on the granular synthesis process,\ncheck the syncgrain manual page.")),("vosim",("Simple vocal simulation based on glottal pulses with formant characteristics.","This opcode produces a simple vocal simulation based on glottal pulses with formant characteristics.\nOutput is a series of sound events, where each event is composed of a burst of squared sine pulses followed by silence.\nThe VOSIM (VOcal SIMulation) synthesis method was developed by Kaegi and Tempelaars in the 1970's.")),("hvs1",("Allows one-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.","hvs1 allows one-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.")),("hvs2",("Allows two-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.","hvs2 allows two-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.")),("hvs3",("Allows three-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.","hvs3 allows three-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.")),("bpf",("Break point function with linear interpolation","Break-point function with linear interpolation. Useful when\n\t  defining a table with GEN27 and scaling the x value would be\n\t  overkill.")),("cosseg",("Trace a series of line segments between specified points with\n      cosine interpolation.","Trace a series of line segments between specified points with\n      cosine interpolation.")),("cossegb",("Trace a series of line segments between specified absolute points with\n      cosine interpolation.","Trace a series of line segments between specified absolute points with\n      cosine interpolation.")),("cossegr",("Trace a series of line segments between specified points with\n      cosine interpolation, including a release segment.","Trace a series of line segments between specified points with\n      cosine interpolation, including a release segment.")),("expcurve",("This opcode implements a formula for generating a normalised exponential curve in range 0 - 1. It is based on the Max / MSP work of Eric Singer (c) 1994.","Generates an exponential curve in range 0 to 1 of arbitrary steepness.\n      Steepness index equal to or lower than 1.0 will result in Not-a-Number\n      errors and cause unstable behavior.")),("expon",("Trace an exponential curve between specified points.","Trace an exponential curve between specified points.")),("expseg",("Trace a series of exponential segments between specified points.","Trace a series of exponential segments between specified points.")),("expsega",("An exponential segment generator operating at a-rate.","An exponential segment generator operating at a-rate. This unit is almost identical to expseg, but more precise when defining segments with very short durations (i.e., in a percussive attack phase) at audio rate.")),("expsegb",("Trace a series of exponential segments between specified\n      absolute points.","Trace a series of exponential segments between specified\n      absolute points.")),("expsegba",("An exponential segment generator operating at a-rate with\n      absolute times.","An exponential segment generator operating at a-rate. This unit\n      is almost identical to expsegb, but\n      more precise when defining segments with very short durations\n      (i.e., in a percussive attack phase) at audio rate.")),("expsegr",("Trace a series of exponential segments between specified points including a release segment.","Trace a series of exponential segments between specified points including a release segment.")),("gainslider",("An implementation of a logarithmic gain curve which is similar to the gainslider~ object from Cycling 74 Max / MSP.","This opcode is intended for use to multiply by an audio signal to give a console mixer like feel. There is no bounds in the\n      source code so you can for example give higher than 127 values for extra amplitude but possibly clipped audio.")),("line",("Trace a straight line between specified points.","Trace a straight line between specified points.")),("linlin",("Linear to linear interpolation","Maps a linear range of values to another linear range of values.")),("linseg",("Trace a series of line segments between specified points.","Trace a series of line segments between specified points.")),("linsegb",("Trace a series of line segments between specified absolute points.","Trace a series of line segments between specified absolute points.")),("linsegr",("Trace a series of line segments between specified points including a release segment.","Trace a series of line segments between specified points including a release segment.")),("logcurve",("This opcode implements a formula for generating a normalised logarithmic curve in range 0 - 1. It is based on the Max / MSP work of Eric Singer (c) 1994.","Generates a logarithmic curve in range 0 to 1 of arbitrary steepness.\n      Steepness index equal to or lower than 1.0 will result in Not-a-Number\n      errors and cause unstable behavior.")),("loopseg",("Generate control signal consisting of linear segments delimited by two or more specified points.","Generate control signal consisting of linear segments delimited by two or more specified points. The entire envelope is looped at kfreq rate. Each parameter can be varied at k-rate.")),("loopsegp",("Control signals based on linear segments.","Generate control signal consisiting of linear segments delimited\n    by two or more specified points. The entire envelope can be looped\n    at time-variant rate. Each segment coordinate can also be varied\n    at k-rate.")),("looptseg",("Generate control signal consisting of exponential or linear segments delimited by two or more specified points.","Generate control signal consisting of controllable exponential segments or linear segments delimited by two or more specified points. The entire envelope is looped at kfreq rate. Each parameter can be varied at k-rate.")),("loopxseg",("Generate control signal consisting of exponential segments delimited by two or more specified points.","Generate control signal consisting of exponential segments delimited by two or more specified points. The entire envelope is looped at kfreq rate. Each parameter can be varied at k-rate.")),("lpshold",("Generate control signal consisting of held segments.","Generate control signal consisting of held segments delimited by two or more specified points. The entire envelope is looped at kfreq rate. Each parameter can be varied at k-rate.")),("lpsholdp",("Control signals based on held segments.","Generate control signal consisiting of held segments delimited\n    by two or more specified points. The entire envelope can be looped\n    at time-variant rate. Each segment coordinate can also be varied\n    at k-rate.")),("scale",("Arbitrary signal scaling.","Scales incoming value to user-definable range. Similar to scale object found in popular dataflow languages.")),("transeg",("Constructs a user-definable envelope.","Constructs a user-definable envelope.")),("transegb",("Constructs a user-definable envelope in absolute time.","Constructs a user-definable envelope in absolute time.")),("transegr",("Constructs a user-definable envelope with extended release segment.","Constructs a user-definable envelope. It is the same\n      as transeg,\n      with an extended release segment.")),("xyscale",("2D linear interpolation","2D linear interpolation between 4 points at (0,0), (1,0), (0,1),\n\t  (1,1)")),("adsr",("Calculates the classical ADSR envelope using linear segments.","Calculates the classical ADSR envelope using linear segments.")),("envlpx",("Applies an envelope consisting of 3 segments.","envlpx -- apply an envelope consisting of 3 segments:")),("envlpxr",("The envlpx opcode with a final release segment.","envlpxr is the same as envlpx except that the final segment is entered only on sensing a MIDI note release. The note is then extended by the decay time.")),("linen",("Applies a straight line rise and decay pattern to an input amp signal.","linen -- apply a straight line rise and decay pattern to an input amp signal.")),("linenr",("The linen opcode extended with a final release segment.","linenr -- same as linen except that the final segment is entered only on sensing a MIDI note release. The note is then extended by the decay time.")),("madsr",("Calculates the classical ADSR envelope using the linsegr mechanism.","Calculates the classical ADSR envelope using the linsegr mechanism.")),("mxadsr",("Calculates the classical ADSR envelope using the expsegr mechanism.","Calculates the classical ADSR envelope using the expsegr mechanism.")),("xadsr",("Calculates the classical ADSR envelope.","Calculates the classical ADSR envelope")),("bamboo",("Semi-physical model of a bamboo sound.","bamboo is a semi-physical model of a bamboo sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.")),("barmodel",("Creates a tone similar to a struck metal bar.","Audio output is a tone similar to a struck metal bar, using a\n    physical model developed from solving the partial differential\n    equation.  There are controls over the boundary conditions as\n    well as the bar characteristics.")),("cabasa",("Semi-physical model of a cabasa sound.","cabasa is a semi-physical model of a cabasa sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.")),("chuap",("Simulates Chua's oscillator, an LRC oscillator with an active resistor, proved capable of bifurcation and chaotic attractors, with k-rate control of circuit elements.","Simulates Chua's oscillator, an LRC oscillator with an active resistor, proved capable of bifurcation and chaotic attractors, with k-rate control of circuit elements.")),("crunch",("Semi-physical model of a crunch sound.","crunch is a semi-physical model of a crunch sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.")),("dripwater",("Semi-physical model of a water drop.","dripwater is a semi-physical model of a water drop. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.")),("gendy",("Dynamic stochastic approach to waveform synthesis conceived by Iannis Xenakis.","Implementation of the G\195\169n\195\169ration Dynamique Stochastique\n      (GENDYN), a dynamic stochastic approach to waveform synthesis conceived\n      by Iannis Xenakis.")),("gendyc",("Dynamic stochastic approach to waveform synthesis using cubic interpolation.","Implementation with cubic interpolation of the\n      G\195\169n\195\169ration Dynamique Stochastique (GENDYN),\n      a dynamic stochastic approach to waveform synthesis conceived by\n      Iannis Xenakis.")),("gendyx",("Variation of the dynamic stochastic approach to waveform\n      synthesis conceived by Iannis Xenakis.","gendyx (gendy eXtended) is an implementation\n      of the G\195\169n\195\169ration Dynamique Stochastique\n      (GENDYN), a dynamic stochastic approach to waveform synthesis\n      conceived by Iannis Xenakis, using curves instead of segments.")),("gogobel",("Audio output is a tone related to the striking of a cow bell or similar.","Audio output is a tone related to the striking of a cow bell or similar. The method is a physical model developed from Perry Cook, but re-coded for Csound.")),("guiro",("Semi-physical model of a guiro sound.","guiro is a semi-physical model of a guiro sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.")),("lorenz",("Implements the Lorenz system of equations.","Implements the Lorenz system of equations.  The Lorenz system is a chaotic-dynamic system which was originally used to simulate the motion of a particle in convection currents and simplified weather systems. Small differences in initial conditions rapidly lead to diverging values. This is sometimes expressed as the butterfly effect. If a butterfly flaps its wings in Australia, it will have an effect on the weather in Alaska. This system is one of the milestones in the development of chaos theory. It is useful as a chaotic audio source or as a low frequency modulation source.")),("mandel",("Mandelbrot set","Returns the number of iterations corresponding to a given point of complex plane by applying the Mandelbrot set formula.")),("mandol",("An emulation of a mandolin.","An emulation of a mandolin.")),("marimba",("Physical model related to the striking of a wooden block.","Audio output is a tone related to the striking of a wooden block as found in a marimba. The method is a physical model developed from Perry Cook but re-coded for Csound.")),("moog",("An emulation of a mini-Moog synthesizer.","An emulation of a mini-Moog synthesizer.")),("planet",("Simulates a planet orbiting in a binary star system.","planet simulates a planet orbiting in a binary star system. The outputs are the x, y and z coordinates of the orbiting planet. It is possible for the planet to achieve escape velocity by a close encounter with a star. This makes this system somewhat unstable.")),("prepiano",("Creates a tone similar to a piano string prepared in a Cageian fashion.","Audio output is a tone similar to a piano string, prepared with\n    a number of rubbers and rattles. The method uses a\n    physical model developed from solving the partial differential\n    equation.")),("sandpaper",("Semi-physical model of a sandpaper sound.","sandpaper is a semi-physical model of a sandpaper sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.")),("sekere",("Semi-physical model of a sekere sound.","sekere is a semi-physical model of a sekere sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.")),("shaker",("Sounds like the shaking of a maraca or similar gourd instrument.","Audio output is a tone related to the shaking of a maraca or similar gourd instrument. The method is a physically inspired model developed from Perry Cook, but re-coded for Csound.")),("sleighbells",("Semi-physical model of a sleighbell sound.","sleighbells is a semi-physical model of a sleighbell sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.")),("stix",("Semi-physical model of a stick sound.","stix is a semi-physical model of a stick sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.")),("tambourine",("Semi-physical model of a tambourine sound.","tambourine is a semi-physical model of a tambourine sound. It is one of the PhISEM percussion opcodes. PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects.")),("vibes",("Physical model related to the striking of a metal block.","Audio output is a tone related to the striking of a metal block as found in a vibraphone. The method is a physical model developed from Perry Cook, but re-coded for Csound.")),("voice",("An emulation of a human voice.","An emulation of a human voice.")),("phasor",("Produce a normalized moving phase value.","Produce a normalized moving phase value.")),("phasorbnk",("Produce an arbitrary number of normalized moving phase values.","Produce an arbitrary number of normalized moving phase values, accessable by an index.")),("sc_phasor",("A resettable linear ramp between two levels","A resettable linear ramp between two levels. Port of\n\t  Supercollider's Phasor.")),("syncphasor",("Produces a normalized moving phase value with sync input and output.","Produces a moving phase value between zero and one and an extra impulse output (\"sync out\") whenever its phase value crosses or is reset to zero. The phase can be reset at any time by an impulse on the \"sync in\" parameter.")),("betarand",("Beta distribution random number generator (positive values only).","Beta distribution random number generator (positive values only). This is an x-class noise generator.")),("bexprnd",("Exponential distribution random number generator.","Exponential distribution random number generator. This is an x-class noise generator.")),("cauchy",("Cauchy distribution random number generator.","Cauchy distribution random number generator. This is an x-class noise generator.")),("cauchyi",("Cauchy distribution random number generator with\n      interpolation.","Cauchy distribution random number generator with controlled\n      interpolation between values. This is an x-class noise\n      generator.")),("cuserrnd",("Continuous USER-defined-distribution RaNDom generator.","Continuous USER-defined-distribution RaNDom generator.")),("duserrnd",("Discrete USER-defined-distribution RaNDom generator.","Discrete USER-defined-distribution RaNDom generator.")),("dust",("Random impulses.","Generates random impulses from 0 to 1.")),("dust2",("Random impulses.","Generates random impulses from -1 to 1.")),("exprand",("Exponential distribution random number generator (positive values only).","Exponential distribution random number generator (positive values only). This is an x-class noise generator.")),("exprandi",("Exponential distribution random number generator with\n      interpolation (positive values only).","Exponential distribution random number generator with controlled\n      interpolation between values (positive values only). This is an\n      x-class noise generator.")),("fractalnoise",("A fractal noise generator.","A fractal noise generator implemented as a white noise filtered\n      by a cascade of 15 first-order filters.")),("gauss",("Gaussian distribution random number generator.","Gaussian distribution random number generator. This is an x-class noise generator.")),("gaussi",("Gaussian distribution random number generator with\n      interpolation.","Gaussian distribution random number generator with controlled\n      interpolation between values. This is an\n      x-class noise generator.")),("gausstrig",("Random impulses around a certain frequency.","Generates random impulses around a certain frequency.")),("getseed",("Reads the global seed value.","Returns the global seed value used for all x-class\n      noise generators.")),("jitter",("Generates a segmented line whose segments are randomly generated.","Generates a segmented line whose segments are randomly generated.")),("jitter2",("Generates a segmented line with user-controllable random segments.","Generates a segmented line with user-controllable random segments.")),("jspline",("A jitter-spline generator.","A jitter-spline generator.")),("linrand",("Linear distribution random number generator (positive values only).","Linear distribution random number generator (positive values only). This is an x-class noise generator.")),("noise",("A white noise generator with an IIR lowpass filter.","A white noise generator with an IIR lowpass filter.")),("pcauchy",("Cauchy distribution random number generator (positive values only).","Cauchy distribution random number generator (positive values only). This is an x-class noise generator.")),("pinker",("Generates pink noise.","Generates pink noise (-3dB/oct response) by the New\n      Shade of Pink algorithm of Stefan Stenzel.")),("pinkish",("Generates approximate pink noise.","Generates approximate pink noise (-3dB/oct response) by one of two different methods:")),("poisson",("Poisson distribution random number generator (positive values only).","Poisson distribution random number generator (positive values only). This is an x-class noise generator.")),("rand",("Generates a controlled random number series.","Output is a controlled random number series between -amp and +amp")),("randh",("Generates random numbers and holds them for a period of time.","Generates random numbers and holds them for a period of time.")),("randi",("Generates a controlled random number series with interpolation between each new number.","Generates a controlled random number series with interpolation between each new number.")),("random",("Generates a controlled pseudo-random number series between min and max values.","Generates is a controlled pseudo-random number series between min and max values.")),("randomh",("Generates random numbers with a user-defined limit and holds them for a period of time.","Generates random numbers with a user-defined limit and holds them for a period of time.")),("randomi",("Generates a user-controlled random number series with interpolation between each new number.","Generates a user-controlled random number series with interpolation between each new number.")),("rnd31",("31-bit bipolar random opcodes with controllable distribution.","31-bit bipolar random opcodes with controllable distribution. These units are portable, i.e. using the same seed value will generate the same random sequence on all systems. The distribution of generated random numbers can be varied at k-rate.")),("rspline",("Generate random spline curves.","Generate random spline curves.")),("seed",("Sets the global seed value.","Sets the global seed value for all x-class noise generators, as well as other opcodes that use a random call, such as grain.")),("trandom",("Generates a controlled pseudo-random number series between min and max values according to a trigger.","Generates a controlled pseudo-random number series between min and max values at k-rate whenever the trigger parameter is different to 0.")),("trirand",("Triangular distribution random number generator","Triangular distribution random number generator. This is an x-class noise generator.")),("unirand",("Uniform distribution random number generator (positive values only).","Uniform distribution random number generator (positive values only). This is an x-class noise generator.")),("urandom",("truly random opcodes with controllable range.","Truly random opcodes with controllable range. These\n      units are for Unix-like systems only and use /dev/urandom to construct\n      Csound random values")),("urd",("A discrete user-defined-distribution random generator that can be used as a function.","A discrete user-defined-distribution random generator that can be used as a function.")),("weibull",("Weibull distribution random number generator (positive values only).","Weibull distribution random number generator (positive values only). This is an x-class noise generator")),("bbcutm",("Generates breakbeat-style cut-ups of a mono audio stream.","The BreakBeat Cutter automatically generates cut-ups of a source audio stream in the style of drum and bass/jungle breakbeat manipulations.  There are two versions, for mono (bbcutm) or stereo (bbcuts) sources.  Whilst originally based on breakbeat cutting, the opcode can be applied to any type of source audio.")),("bbcuts",("Generates breakbeat-style cut-ups of a stereo audio stream.","The BreakBeat Cutter automatically generates cut-ups of a source audio stream in the style of drum and bass/jungle breakbeat manipulations.  There are two versions, for mono (bbcutm) or stereo (bbcuts) sources.  Whilst originally based on breakbeat cutting, the opcode can be applied to any type of source audio.")),("flooper",("Function-table-based crossfading looper.","This opcode reads audio from a function table and plays it back in a loop with user-defined\n   start time, duration and crossfade time. It also allows the pitch of the loop to be controlled,\n   including reversed playback. It accepts non-power-of-two tables, such as deferred-allocation\n   GEN01 tables, with one or two channels.")),("flooper2",("Function-table-based crossfading looper.","This opcode implements a crossfading looper with variable loop parameters and three\n  looping modes, optionally using a table for its crossfade shape. It accepts \n  non-power-of-two tables for its source sounds, such as deferred-allocation\n   GEN01 tables, with one or two channels.")),("fluidAllOut",("Collects all audio from all Fluidsynth engines in a performance","Collects all audio from all Fluidsynth engines in a performance")),("fluidCCi",("Sends a MIDI controller data message to fluid.","Sends a MIDI controller data (MIDI controller number and value to use)\n    message to a fluid engine by number on the user specified MIDI channel number.")),("fluidCCk",("Sends a MIDI controller data message to fluid.","Sends a MIDI controller data (MIDI controller number and value to use)\n    message to a fluid engine by number on the user specified MIDI channel number.")),("fluidControl",("Sends MIDI note on, note off, and other messages to a SoundFont preset.","The fluid opcodes provide a simple\n    Csound opcode wrapper around Peter Hanappe's Fluidsynth SoundFont2\n    synthesizer. This implementation accepts any MIDI note on, note\n    off, controller, pitch bend, or program change message at\n    k-rate. Maximum polyphony is 4096 simultaneously sounding\n    voices. Any number of SoundFonts may be loaded and played\n    simultaneously.")),("fluidEngine",("Instantiates a fluidsynth engine.","Instantiates a fluidsynth engine, and returns ienginenum to identify the\n    engine. ienginenum is passed to other other opcodes for loading \n    and playing SoundFonts and gathering the generated sound.")),("fluidLoad",("Loads a SoundFont into a fluidEngine, optionally listing SoundFont contents.","Loads a SoundFont into an instance of a fluidEngine, optionally\n    listing banks and presets for SoundFont.")),("fluidNote",("Plays a note on a channel in a fluidSynth engine.","Plays a note at imidikey pitch and imidivel velocity\n    on ichannelnum channel of number ienginenum fluidEngine.")),("fluidOut",("Outputs sound from a given fluidEngine","Outputs the sound from a fluidEngine.")),("fluidProgramSelect",("Assigns a preset from a SoundFont to a channel on a fluidEngine.","Assigns a preset from a SoundFont to a channel on a fluidEngine.")),("fluidSetInterpMethod",("Set interpolation method for channel in Fluid Engine","Set interpolation method for channel in Fluid Engine.  Lower \n    order interpolation methods will render faster at lower fidelity while \n    higher order interpolation methods will render slower at higher fidelity.\n    Default interpolation for a channel is 4th order interpolation.")),("loscil",("Read sampled sound from a table.","Read sampled sound (mono or stereo) from a table, with optional sustain and release looping.")),("loscil3",("Read sampled sound from a table using cubic interpolation.","Read sampled sound (mono or stereo) from a table, with optional sustain and release looping, using cubic interpolation.")),("loscilx",("Read multi-channel sampled sound from a table.","Read sampled sound (up to 16 channels) from a table, with\n      optional sustain and release looping.")),("lphasor",("Generates a table index for sample playback","This opcode can be used to generate table index for sample playback (e.g. tablexkt).")),("lposcil",("Read sampled sound from a table with looping and high precision.","Read sampled sound (mono or stereo) from a table, with looping, and high precision.")),("lposcil3",("Read sampled sound from a table with high precision and cubic interpolation.","Read sampled sound (mono or stereo) from a table, with looping, and high precision. lposcil3 uses cubic interpolation.")),("lposcila",("Read sampled sound from a table with looping and high precision.","lposcila reads sampled sound from a table with looping and high precision.")),("lposcilsa",("Read stereo sampled sound from a table with looping and high precision.","lposcilsa reads stereo sampled sound from a table with looping and high precision.")),("lposcilsa2",("Read stereo sampled sound from a table with looping and high precision.","lposcilsa2 reads stereo sampled sound from a table with looping and high precision.")),("sfilist",("Prints a list of all instruments of a previously loaded SoundFont2 (SF2) file.","Prints a list of all instruments of a previously loaded SoundFont2 (SF2) sample file. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sfinstr",("Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound.","Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sfinstr3",("Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound with cubic interpolation.","Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound with cubic interpolation. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sfinstr3m",("Plays a SoundFont2 (SF2) sample instrument, generating a mono sound with cubic interpolation.","Plays a SoundFont2 (SF2) sample instrument, generating a mono sound with cubic interpolation. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sfinstrm",("Plays a SoundFont2 (SF2) sample instrument, generating a mono sound.","Plays a SoundFont2 (SF2) sample instrument, generating a mono sound. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sfload",("Loads an entire SoundFont2 (SF2) sample file into memory.","Loads an entire SoundFont2 (SF2) sample file into memory. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sflooper",("Plays a SoundFont2 (SF2) sample preset, generating a stereo sound, with user-defined\n      time-varying crossfade looping.","Plays a SoundFont2 (SF2) sample preset, generating a stereo sound, similarly to sfplay. Unlike that opcode, though,\n\t  it ignores the looping points set in the SF2 file and substitutes them for a user-defined crossfade loop. It is\n\t  a cross between sfplay and\n      flooper2.")),("sfpassign",("Assigns all presets of a SoundFont2 (SF2) sample file to a sequence of progressive index numbers.","Assigns all presets of a previously loaded SoundFont2 (SF2)\n      sample file to a sequence of progressive index numbers. These\n      opcodes allow management the sample-structure of SF2 files. In\n      order to understand the usage of these opcodes, the user must\n      have some knowledge of the SF2 format, so a brief description of\n      this format can be found in\n      the SoundFont2 File Format\n      Appendix.")),("sfplay",("Plays a SoundFont2 (SF2) sample preset, generating a stereo sound.","Plays a SoundFont2 (SF2) sample preset, generating a stereo sound. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sfplay3",("Plays a SoundFont2 (SF2) sample preset, generating a stereo sound with cubic interpolation.","Plays a SoundFont2 (SF2) sample preset, generating a stereo sound with cubic interpolation. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sfplay3m",("Plays a SoundFont2 (SF2) sample preset, generating a mono sound with cubic interpolation.","Plays a SoundFont2 (SF2) sample preset, generating a mono sound with cubic interpolation. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sfplaym",("Plays a SoundFont2 (SF2) sample preset, generating a mono sound.","Plays a SoundFont2 (SF2) sample preset, generating a mono sound. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sfplist",("Prints a list of all presets of a SoundFont2 (SF2) sample file.","Prints a list of all presets of a previously loaded SoundFont2 (SF2) sample file. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sfpreset",("Assigns an existing preset of a SoundFont2 (SF2) sample file to an index number.","Assigns an existing preset of a previously loaded SoundFont2 (SF2) sample file to an index number. These opcodes allow management the sample-structure of SF2 files. In order to understand the usage of these opcodes, the user must have some knowledge of the SF2 format, so a brief description of this format can be found in the SoundFont2 File Format Appendix.")),("sndloop",("A sound looper with pitch control.","This opcode records input audio and plays it back in a loop with user-defined\n   duration and crossfade time. It also allows the pitch of the loop to be controlled,\n   including reversed playback.")),("waveset",("A simple time stretch by repeating cycles.","A simple time stretch by repeating cycles.")),("scanhammer",("Copies from one table to another with a gain control.","This is is a variant of tablecopy, copying from one table to another, starting at ipos, and with a gain control. The number of points copied is determined by the length of the source. Other points are not changed. This opcode can be used to \226\128\156hit\226\128\157 a string in the scanned synthesis code.")),("scans",("Generate audio output using scanned synthesis.","Generate audio output using scanned synthesis.")),("scantable",("A simpler scanned synthesis implementation.","A simpler scanned synthesis implementation. This is an implementation of a circular string scanned using external tables. This opcode will allow direct modification and reading of values with the table opcodes.")),("scanu",("Compute the waveform and the wavetable for use in scanned synthesis.","Compute the waveform and the wavetable for use in scanned synthesis.")),("xscanmap",("Allows the position and velocity of a node in a scanned process to be read.","Allows the position and velocity of a node in a scanned process to be read.")),("xscans",("Fast scanned synthesis waveform and the wavetable generator.","Experimental version of scans.  Allows much larger matrices and is faster and smaller but removes some (unused?) flexibility.  If liked, it will replace the older opcode as it is syntax compatible but extended.")),("xscansmap",("Allows the position and velocity of a node in a scanned process to be read.","Allows the position and velocity of a node in a scanned process to be read.")),("xscanu",("Compute the waveform and the wavetable for use in scanned synthesis.","Experimental version of scanu. Allows much larger matrices and is faster and smaller but removes some (unused?) flexibility.  If liked, it will replace the older opcode as it is syntax compatible but extended.")),("STKBandedWG",("STKBandedWG uses banded waveguide techniques to model a variety of sounds.","This opcode uses banded waveguide techniques to model a variety of sounds, including bowed bars, glasses, and bowls.")),("STKBeeThree",("STK Hammond-oid organ-like FM synthesis instrument.","STK Hammond-oid organ-like FM synthesis instrument.")),("STKBlowBotl",("STKBlowBotl uses a helmholtz resonator (biquad filter) with a polynomial jet excitation.","This opcode implements a helmholtz resonator (biquad filter) with a polynomial jet excitation (a la Cook).")),("STKBlowHole",("STK clarinet physical model with one register hole and one tonehole.","This opcode is based on the clarinet model, with the addition of a two-port register hole and a three-port dynamic tonehole implementation.")),("STKBowed",("STKBowed is a bowed string instrument.","STKBowed is a bowed string instrument, using a waveguide model.")),("STKBrass",("STKBrass is a simple brass instrument.","STKBrass uses a simple brass instrument waveguide model, a la Cook.")),("STKClarinet",("STKClarinet uses a simple clarinet physical model.","STKClarinet uses a simple clarinet physical model.")),("STKDrummer",("STKDrummer is a drum sampling synthesizer.","STKDrummer is a drum sampling synthesizer using raw waves and one-pole filters,\n      The drum rawwave files are sampled at 22050 Hz, but will be appropriately interpolated for other sample rates.")),("STKFMVoices",("STKFMVoices is a singing FM synthesis instrument.","STKFMVoices is a singing FM synthesis instrument. It has 3 carriers and a common modulator, also referred to as algorithm 6 of the TX81Z.")),("STKFlute",("STKFlute uses a simple flute physical model.","STKFlute uses a simple flute physical model. The jet model uses a polynomial, a la Cook.")),("STKHevyMetl",("STKHevyMetl produces metal sounds.","STKHevyMetl produces metal sounds, using FM synthesis.\n      It uses 3 cascade operators with feedback modulation, also referred to as algorithm 3 of the TX81Z.")),("STKMandolin",("STKMandolin produces mamdolin-like sounds.","STKMandolin produces mamdolin-like sounds, using \"commuted synthesis\" techniques to model a mandolin instrument.")),("STKModalBar",("STKModalBar is a resonant bar instrument.","This opcode is a resonant bar instrument.It has a number of different struck bar instruments.")),("STKMoog",("STKMoog produces moog-like swept filter sounds.","STKMoog produces moog-like swept filter sounds, using one attack wave, one looped wave, and an ADSR envelope and adds two sweepable formant filters.")),("STKPercFlut",("STKPercFlut is a percussive flute FM synthesis instrument.","STKPercFlut is a percussive flute FM synthesis instrument. The instrument uses an algorithm like the algorithm 4 of the TX81Z.")),("STKPlucked",("STKPlucked uses a plucked string physical model.","STKPlucked uses a plucked string physical model based on the Karplus-Strong algorithm.")),("STKResonate",("STKResonate is a noise driven formant filter.","STKResonate is a noise driven formant filter. This instrument contains a noise source, which excites a biquad resonance filter, with volume controlled by an ADSR.")),("STKRhodey",("STK Fender Rhodes-like electric piano FM synthesis instrument.","STK Fender Rhodes-like electric piano FM synthesis instrument.")),("STKSaxofony",("STKSaxofony is a faux conical bore reed instrument.","STKSaxofony is a faux conical bore reed instrument.\n      This opcode uses a \"hybrid\" digital waveguide instrument that can generate a variety of wind-like sounds. It has also been referred to as the \"blowed string\" model. \n      The waveguide section is essentially that of a string, with one rigid and one lossy termination. The non-linear function is a reed table. \n      The string can be \"blown\" at any point between the terminations, though just as with strings, it is impossible to excite the system at either end. \n      If the excitation is placed at the string mid-point, the sound is that of a clarinet. At points closer to the \"bridge\", the sound is closer to that of a saxophone.")),("STKShakers",("STKShakers is an instrument that simulates environmental sounds or collisions of multiple independent sound producing objects.","STKShakers are a set of PhISEM and PhOLIES instruments: \n      PhISEM (Physically Informed Stochastic Event Modeling) is an algorithmic approach for simulating collisions of multiple independent sound producing objects. \n      It can simulate a Maraca, Sekere, Cabasa, Bamboo Wind Chimes, Water Drops, Tambourine, Sleighbells, and a Guiro. On http://soundlab.cs.princeton.edu/research/controllers/shakers/\nPhOLIES (Physically-Oriented Library of Imitated Environmental Sounds) there is a similar approach for the synthesis of environmental sounds. \nIt simulates of breaking sticks, crunchy snow (or not), a wrench, sandpaper, and more..")),("STKSimple",("STKSimple is a wavetable/noise instrument.","STKSimple is a wavetable/noise instrument.\n      It combines a looped wave, a noise source, a biquad resonance filter, a one-pole filter, and an ADSR envelope to create some interesting sounds.")),("STKSitar",("STKSitar uses a plucked string physical model.","STKSitar uses a plucked string physical model based on the Karplus-Strong algorithm.")),("STKStifKarp",("STKStifKarp is a plucked stiff string instrument.","STKStifKarp is a plucked stiff string instrument. \n      It a simple plucked string algorithm (Karplus Strong) with enhancements, including string stiffness and pluck position controls. The stiffness is modeled with allpass filters.")),("STKTubeBell",("STKTubeBell is a  tubular bell (orchestral chime) FM synthesis instrument.","STKTubeBell is a tubular bell (orchestral chime) FM synthesis instrument. \n      It uses two simple FM Pairs summed together, also referred to as algorithm 5 of the TX81Z.")),("STKVoicForm",("STKVoicForm is a  four formant synthesis instrument.","STKVoicForm is a four formant synthesis instrument. \nThis instrument contains an excitation singing wavetable (looping wave with random and periodic vibrato, smoothing on frequency, etc.), excitation noise, and four sweepable complex resonances. \nMeasured formant data is included, and enough data is there to support either parallel or cascade synthesis. In the floating point case cascade synthesis is the most natural so that's what you'll find here.")),("STKWhistle",("STKWhistle produces whistle sounds.","STKWhistle produces (police) whistle sounds. It uses a hybrid physical/spectral model of a police whistle (a la Cook).")),("STKWurley",("STKWurley simulates a Wurlitzer electric piano FM synthesis instrument.","STKWurley simulates a Wurlitzer electric piano FM synthesis instrument. \n      It uses two simple FM Pairs summed together, also referred to as algorithm 5 of the TX81Z.")),("oscil1",("Accesses table values by incremental sampling.","Accesses table values by incremental sampling.")),("oscil1i",("Accesses table values by incremental sampling with linear interpolation.","Accesses table values by incremental sampling with linear interpolation.")),("ptable",("Accesses table values by direct indexing.","Accesses table values by direct indexing.")),("ptable3",("Accesses table values by direct indexing with cubic interpolation.","Accesses table values by direct indexing with cubic interpolation.")),("ptablei",("Accesses table values by direct indexing with linear interpolation.","Accesses table values by direct indexing with linear interpolation.")),("tab_i",("Fast table opcodes.","Fast table opcodes. Faster than\n    table and\n    tablew because don't\n    allow wrap-around and limit and don't check index validity. Have\n    been implemented in order to provide fast access to\n    arrays. Support non-power of two tables (can be generated by any\n    GEN function by giving a negative length value).")),("tab",("Fast table opcodes.","Fast table opcodes. Faster than\n    table and\n    tablew because don't\n    allow wrap-around and limit and don't check index validity. Have\n    been implemented in order to provide fast access to\n    arrays. Support non-power of two tables (can be generated by any\n    GEN function by giving a negative length value).")),("tabw_i",("Fast table opcodes.","Fast table opcodes. Faster than\n    table and\n    tablew because don't\n    allow wrap-around and limit and don't check index validity. Have\n    been implemented in order to provide fast access to\n    arrays. Support non-power of two tables (can be generated by any\n    GEN function by giving a negative length value).")),("tabw",("Fast table opcodes.","Fast table opcodes. Faster than\n    table and\n    tablew because don't\n    allow wrap-around and limit and don't check index validity. Have\n    been implemented in order to provide fast access to\n    arrays. Support non-power of two tables (can be generated by any\n    GEN function by giving a negative length value).")),("table",("Accesses table values by direct indexing.","Accesses table values by direct indexing.")),("table3",("Accesses table values by direct indexing with cubic interpolation.","Accesses table values by direct indexing with cubic interpolation.")),("tablei",("Accesses table values by direct indexing with linear interpolation.","Accesses table values by direct indexing with linear interpolation.")),("wterrain",("A simple wave-terrain synthesis opcode.","A simple wave-terrain synthesis opcode.")),("pluck",("Produces a naturally decaying plucked string or drum sound.","Audio output is a naturally decaying plucked string or drum sound based on the Karplus-Strong algorithms.")),("repluck",("Physical model of the plucked string.","repluck is an implementation of the physical model of the plucked string. A user can control the pluck point, the pickup point, the filter, and an additional audio signal, axcite. axcite is used to excite the 'string'. Based on the Karplus-Strong algorithm.")),("streson",("A string resonator with variable fundamental frequency.","An audio signal is modified by a string resonator with variable fundamental frequency.")),("wgbow",("Creates a tone similar to a bowed string.","Audio output is a tone similar to a bowed string, using a physical model developed from Perry Cook, but re-coded for Csound.")),("wgbowedbar",("A physical model of a bowed bar.","A physical model of a bowed bar, belonging to the Perry Cook family of waveguide instruments.")),("wgbrass",("Creates a tone related to a brass instrument.","Audio output is a tone related to a brass instrument, using a physical model developed from Perry Cook, but re-coded for Csound.")),("wgclar",("Creates a tone similar to a clarinet.","Audio output is a tone similar to a clarinet, using a physical model developed from Perry Cook, but re-coded for Csound.")),("wgflute",("Creates a tone similar to a flute.","Audio output is a tone similar to a flute, using a physical model developed from Perry Cook, but re-coded for Csound.")),("wgpluck",("A high fidelity simulation of a plucked string.","A high fidelity simulation of a plucked string, using interpolating delay-lines.")),("wgpluck2",("Physical model of the plucked string.","wgpluck2 is an implementation of the physical model of the plucked string, with control over the pluck point, the pickup point and the filter. Based on the Karplus-Strong algorithm.")),("dumpk",("Periodically writes an orchestra control-signal value to an external file.","Periodically writes an orchestra control-signal value to a named external file in a specific format.")),("dumpk2",("Periodically writes two orchestra control-signal values to an external file.","Periodically writes two orchestra control-signal values to a named external file in a specific format.")),("dumpk3",("Periodically writes three orchestra control-signal values to an external file.","Periodically writes three orchestra control-signal values to a named external file in a specific format.")),("dumpk4",("Periodically writes four orchestra control-signal values to an external file.","Periodically writes four orchestra control-signal values to a named external file in a specific format.")),("ficlose",("Closes a previously opened file.","ficlose can be used to close a file which was opened with fiopen.")),("fin",("Read signals from a file at a-rate.","Read signals from a file at a-rate.")),("fini",("Read signals from a file at i-rate.","Read signals from a file at i-rate.")),("fink",("Read signals from a file at k-rate.","Read signals from a file at k-rate.")),("fiopen",("Opens a file in a specific mode.","fiopen can be used to open a file in one of the specified modes.")),("fout",("Outputs a-rate signals to an arbitrary number of channels.","fout outputs N a-rate signals to a specified file of N channels.")),("fouti",("Outputs i-rate signals of an arbitrary number of channels to a specified file.","fouti output N i-rate signals to a specified file of N channels.")),("foutir",("Outputs i-rate signals from an arbitrary number of channels to a specified file.","foutir output N i-rate signals to a specified file of N channels.")),("foutk",("Outputs k-rate signals of an arbitrary number of channels to a specified file, in raw (headerless) format.","foutk outputs N k-rate signals to a specified file of N channels.")),("fprintks",("Similar to printks but prints to a file.","Similar to printks but prints to a file.")),("fprints",("Similar to prints but prints to a file.","Similar to prints but prints to a file.")),("hdf5read",("Read signals and arrays from an hdf5 file.","hdf5read reads N signals and arrays from a specified hdf5 file.")),("hdf5write",("Write signals and arrays to an hdf5 file.","hdf5write writes N signals and arrays to a specified hdf5 file.")),("readf",("Read a line of text from an external file.","Read a line of text from an external file once each k-cycle.")),("readfi",("Read a line of text from an external file.","Read a line of text from an external file once on initialisation.")),("readk",("Periodically reads an orchestra control-signal value from an external file.","Periodically reads an orchestra control-signal value from a named external file in a specific format.")),("readk2",("Periodically reads two orchestra control-signal values from an external file.","Periodically reads two orchestra control-signal values from an external file.")),("readk3",("Periodically reads three orchestra control-signal values from an external file.","Periodically reads three orchestra control-signal values from an external file.")),("readk4",("Periodically reads four orchestra control-signal values from an external file.","Periodically reads four orchestra control-signal values from an external file.")),("diskin",("Reads audio data from an external device or stream and can alter its pitch.","Reads audio data from an external device or stream and can alter its pitch.")),("diskin2",("Reads audio data from a file, and can alter its pitch using one of several\n      available interpolation types, as well as convert the sample rate to match\n      the orchestra sr setting.","Reads audio data from a file, and can alter its pitch using\n\tone of several available interpolation types, as well as\n\tconvert the sample rate to match the orchestra sr\n\tsetting. diskin2 can also read\n\tmultichannel files with any number of channels in the range 1\n\tto 24 in versions before 5.14, and 40 after.")),("in",("Reads mono audio data from an external device or stream.","Reads audio data from an external device or stream.")),("in32",("Reads a 32-channel audio signal from an external device or stream.","Reads a 32-channel audio signal from an external device or stream.")),("inch",("Reads from numbered channels in an external audio signal or stream.","Reads from numbered channels in an external audio signal or stream.")),("inh",("Reads six-channel audio data from an external device or stream.","Reads six-channel audio data from an external device or stream.")),("ino",("Reads eight-channel audio data from an external device or stream.","Reads eight-channel audio data from an external device or stream.")),("inq",("Reads quad audio data from an external device or stream.","Reads quad audio data from an external device or stream.")),("inrg",("Allow input from a range of adjacent audio channels from the audio input device","inrg reads audio from a range of adjacent audio channels from the audio input device.")),("ins",("Reads stereo audio data from an external device or stream.","Reads stereo audio data from an external device or stream.")),("invalue",("Reads a k-rate signal from a user-defined channel.","Reads a k-rate or i-rate signal or string from a user-defined channel.")),("inx",("Reads a 16-channel audio signal from an external device or stream.","Reads a 16-channel audio signal from an external device or stream.")),("inz",("Reads multi-channel audio samples into a ZAK array from an external device or stream.","Reads multi-channel audio samples into a ZAK array from an external device or stream.")),("mp3in",("Reads mono or stereo audio data from an external MP3 file.","Reads mono or stereo audio data from an external MP3 file.")),("soundin",("Reads audio data from an external device or stream.","Reads audio data from an external device or stream.  Up to 24\n      channels may be read before v5.14, extended to 40 in later versions.")),("mdelay",("A MIDI delay opcode.","A MIDI delay opcode.")),("monitor",("Returns the audio spout frame.","Returns the audio spout frame (if active), otherwise it returns zero.")),("out",("Writes audio data to an external device or stream.","Writes audio data to an external device or stream, either from\n      audio variables or from an audio array.")),("out32",("Writes 32-channel audio data to an external device or stream.","Writes 32-channel audio data to an external device or stream.")),("outc",("Writes audio data with an arbitrary number of channels to an external device or stream.","Writes audio data with an arbitrary number of channels to an external device or stream.")),("outch",("Writes multi-channel audio data, with user-controllable channels, to an external device or stream.","Writes multi-channel audio data, with user-controllable channels, to an external device or stream.")),("outh",("Writes 6-channel audio data to an external device or stream.","Writes 6-channel audio data to an external device or stream.")),("outo",("Writes 8-channel audio data to an external device or stream.","Writes 8-channel audio data to an external device or stream.")),("outq",("Writes 4-channel audio data to an external device or stream.","Writes 4-channel audio data to an external device or stream.")),("outq1",("Writes samples to quad channel 1 of an external device or stream.","Writes samples to quad channel 1 of an external device or stream.")),("outq2",("Writes samples to quad channel 2 of an external device or stream.","Writes samples to quad channel 2 of an external device or stream.")),("outq3",("Writes samples to quad channel 3 of an external device or stream.","Writes samples to quad channel 3 of an external device or stream.")),("outq4",("Writes samples to quad channel 4 of an external device or stream.","Writes samples to quad channel 4 of an external device or stream.")),("outrg",("Allow output to a range of adjacent audio channels on the audio output device","outrg outputs audio to a range of adjacent audio channels on the audio output device.")),("outs",("Writes stereo audio data to an external device or stream.","Writes stereo audio data to an external device or stream.")),("outs1",("Writes samples to stereo channel 1 of an external device or stream.","Writes samples to stereo channel 1 of an external device or stream.")),("outs2",("Writes samples to stereo channel 2 of an external device or stream.","Writes samples to stereo channel 2 of an external device or stream.")),("outvalue",("Sends an i-rate or k-rate signal or string to a user-defined channel.","Sends an irate or k-rate signal or string to a user-defined channel.")),("outx",("Writes 16-channel audio data to an external device or stream.","Writes 16-channel audio data to an external device or stream.")),("outz",("Writes multi-channel audio data from a ZAK array to an external device or stream.","Writes multi-channel audio data from a ZAK array to an external device or stream.")),("soundout",("Deprecated. Writes audio output to a disk file.","The usage of soundout is discouraged. Please use  fout instead.")),("soundouts",("Deprecated. Writes audio output to a disk file.","The usage of soundouts is discouraged. Please use  fout instead.")),("chani",("Reads data from the software bus","Reads data from a channel of the inward software bus.")),("chano",("Send data to the outwards software bus","Send data to a channel of the outward software bus.")),("chn_k",("Declare a channel of the named software bus.","Declare a channel of the named software bus, with setting optional\n      parameters in the case of a control channel. If the channel does not\n      exist yet, it is created, with an inital value of zero or empty string.\n      Otherwise, the type (control, audio, or string) of the existing channel\n      must match the declaration, or an init error occurs. The input/output\n      mode of an existing channel is updated so that it becomes the bitwise\n      OR of the previous and the newly specified value.")),("chn_a",("Declare a channel of the named software bus.","Declare a channel of the named software bus, with setting optional\n      parameters in the case of a control channel. If the channel does not\n      exist yet, it is created, with an inital value of zero or empty string.\n      Otherwise, the type (control, audio, or string) of the existing channel\n      must match the declaration, or an init error occurs. The input/output\n      mode of an existing channel is updated so that it becomes the bitwise\n      OR of the previous and the newly specified value.")),("chn_S",("Declare a channel of the named software bus.","Declare a channel of the named software bus, with setting optional\n      parameters in the case of a control channel. If the channel does not\n      exist yet, it is created, with an inital value of zero or empty string.\n      Otherwise, the type (control, audio, or string) of the existing channel\n      must match the declaration, or an init error occurs. The input/output\n      mode of an existing channel is updated so that it becomes the bitwise\n      OR of the previous and the newly specified value.")),("chnclear",("Clears an audio output channel of the named software bus.","Clears an audio channel of the named software bus to zero.\n      Implies declaring the channel with imode=2 (see also\n      chn_a).")),("chnexport",("Export a global variable as a channel of the bus.","Export a global variable as a channel of the bus; the channel\n      should not already exist, otherwise an init error occurs.\n      This opcode is normally called from the orchestra header, and allows\n      the host application to read or write orchestra variables directly,\n      without having to use\n      chnget or\n      chnset to copy data.")),("chnget",("Reads data from the software bus.","Reads data from a channel of the inward named software bus.\n      Implies declaring the channel with imode=1 (see also\n      chn_k, chn_a, and chn_S).")),("chngetks",("Reads data from the software bus.","Reads data from a channel of the inward named software bus.\n      Implies declaring the channel with imode=1 (see also\n      chn_k, chn_a, and chn_S).")),("chnmix",("Writes audio data to the named software bus, mixing to the previous\n      output.","Adds an audio signal to a channel of the named software bus.\n      Implies declaring the channel with imode=2 (see also\n      chn_a).")),("chnparams",("Query parameters of a channel.","Query parameters of a channel (if it does not exist, all\n      returned values are zero).")),("chnset",("Writes data to the named software bus.","Write to a channel of the named software bus. Implies declaring the\n      channel with imod=2 (see also\n      chn_k, chn_a, and chn_S).")),("chnsetks",("Writes data to the named software bus.","Write to a channel of the named software bus. Implies declaring the\n      channel with imod=2 (see also\n      chn_k, chn_a, and chn_S).")),("setksmps",("Sets the local ksmps value in an instrument or user-defined opcode block","Sets the local ksmps value in an instrument or user-defined opcode block.")),("xin",("Passes variables to a user-defined opcode block,","The xin and xout opcodes copy variables to and from the opcode definition, allowing communication with the calling instrument.")),("xout",("Retrieves variables from a user-defined opcode block,","The xin and xout opcodes copy variables to and from the opcode definition, allowing communication with the calling instrument.")),("dispfft",("Displays the Fourier Transform of an audio or control signal.","These units will print orchestra init-values, or produce graphic display of orchestra control signals and audio signals. Uses X11 windows if enabled, else (or if -g flag is set) displays are approximated in ASCII characters.")),("display",("Displays the audio or control signals as an amplitude vs. time graph.","These units will print orchestra init-values, or produce graphic display of orchestra control signals and audio signals. Uses X11 windows if enabled, else (or if -g flag is set) displays are approximated in ASCII characters.")),("flashtxt",("Allows text to be displayed from instruments like sliders","Allows text to be displayed from instruments like sliders etc. (only on Unix and Windows at present)")),("print",("Displays the values init (i-rate) variables.","These units will print orchestra init-values.")),("printf_i",("printf-style formatted output","printf and printf_i write\n    formatted output, similarly to the C function\n    printf(). printf_i runs at i-time only, while\n    printf runs both at initialization and\n    performance time.")),("printf",("printf-style formatted output","printf and printf_i write\n    formatted output, similarly to the C function\n    printf(). printf_i runs at i-time only, while\n    printf runs both at initialization and\n    performance time.")),("printk",("Prints one k-rate value at specified intervals.","Prints one k-rate value at specified intervals.")),("printk2",("Prints a new value every time a control variable changes.","Prints a new value every time a control variable changes.")),("printks",("Prints at k-rate using a printf() style syntax.","Prints at k-rate using a printf() style syntax.")),("printks2",("Prints a new value every time a control variable changes using a\n      printf() style syntax.","Prints a new value every time a control variable changes using a\n      printf() style syntax.")),("prints",("Prints at init-time using a printf() style syntax.","Prints at init-time using a printf() style syntax.")),("filebit",("Returns the number of bits in each sample in a sound file.","Returns the number of bits in each sample in a sound file.")),("filelen",("Returns the length of a sound file.","Returns the length of a sound file.")),("filenchnls",("Returns the number of channels in a sound file.","Returns the number of channels in a sound file.")),("filepeak",("Returns the peak absolute value of a sound file.","Returns the peak absolute value of a sound file.")),("filesr",("Returns the sample rate of a sound file.","Returns the sample rate of a sound file.")),("filevalid",("Checks that a file can be used.","Returns 1 if the sound file is valid, or 0 if not.")),("mp3len",("Returns the length of an MP3 sound file.","Returns the length of an MP3 sound file.")),("balance",("Adjust one audio signal according to the values of another.","The rms power of asig can be interrogated, set, or adjusted to match that of a comparator signal.")),("clip",("Clips a signal to a predefined limit.","Clips an a-rate signal to a predefined limit, in a \226\128\156soft\226\128\157 manner, using one of three methods.")),("compress",("Compress, limit, expand, duck or gate an audio signal.","This unit functions as an audio\n    compressor, limiter, expander, or noise gate, using either\n    soft-knee or hard-knee mapping, and with dynamically variable\n    performance characteristics.  It takes two audio input signals,\n    aasig and acsig, the first of which is modified by a running\n    analysis of the second. Both signals can be the same, or the first\n    can be modified by a different controlling signal.")),("compress2",("Compress, limit, expand, duck or gate an audio signal.","This unit functions as an audio\n    compressor, limiter, expander, or noise gate, using either\n    soft-knee or hard-knee mapping, and with dynamically variable\n    performance characteristics.  It takes two audio input signals,\n    aasig and acsig, the first of which is modified by a running\n    analysis of the second. Both signals can be the same, or the first\n    can be modified by a different controlling signal.")),("dam",("A dynamic compressor/expander.","This opcode dynamically modifies a gain value applied to the input sound ain by comparing its power level to a given threshold level. The signal will be compressed/expanded with different factors regarding that it is over or under the threshold.")),("gain",("Adjusts the amplitude audio signal according to a root-mean-square value.","Adjusts the amplitude audio signal according to a root-mean-square value.")),("convolve",("Convolves a signal and an impulse response.","Output is the convolution of signal ain and the impulse response contained in ifilcod. If more than one output signal is supplied, each will be convolved with the same impulse response. Note that it is considerably more efficient to use one instance of the operator when processing a mono input to create stereo, or quad, outputs.")),("cross2",("Cross synthesis using FFT's.","This is an implementation of cross synthesis using FFT's.")),("dconv",("A direct convolution opcode.","A direct convolution opcode.")),("ftconv",("Low latency multichannel convolution, using a function table as impulse\n\tresponse source.","Low latency multichannel convolution, using a function table as impulse\n\tresponse source. The algorithm is to split the impulse response to\n\tpartitions of length determined by the iplen parameter, and delay and\n\tmix partitions so that the original, full length impulse response is\n\treconstructed without gaps. The output delay (latency) is iplen samples,\n\tand does not depend on the control rate, unlike in the case of other\n\tconvolve opcodes.")),("ftmorf",("Morphs between multiple ftables as specified in a list.","Uses an index into a table of ftable numbers to morph between adjacent tables in the list.This morphed function is written into the table referenced by iresfn on every k-cycle.")),("liveconv",("Partitioned convolution with dynamically reloadable impulse response","Computationally efficient, partitioned convolution, using a function table as impulse response (IR) source,\n      similar to the ftconv opcode. \n      The liveconv opcode allows dynamic reload of IR data at any time\n      while the convolution is running, controlled by the kupdate parameter.\n      Due to the manner in which the IR is updated, the operation can be done without audio artifacts in the convolution output.")),("pconvolve",("Convolution based on a uniformly partitioned overlap-save algorithm","Convolution based on a uniformly partitioned overlap-save algorithm. Compared to the convolve opcode, pconvolve has these benefits:")),("tvconv",("A time-varying convolution (FIR filter) opcode.","An opcode that takes two incoming signals and\n      interprets one of them as the coefficients of linear\n      time-variable finite impulse response filter. This is\n      implemented via direct convolution (for partition sizes of\n      1 sample) or DFT-based partitioned convolution.\n      The signals can be 'frozen' (i.e. the filter coefficients are\n      kept the same) at any point in time, at a-rate or k-rate.")),("delay",("Delays an input signal by some time interval.","A signal can be read from or written into a delay path, or it can be automatically delayed by some time interval.")),("delay1",("Delays an input signal by one sample.","Delays an input signal by one sample.")),("delayk",("Delays an input signal by some time interval.","k-rate delay opcodes")),("vdel_k",("Delays an input signal by some time interval.","k-rate delay opcodes")),("delayr",("Reads from an automatically established digital delay line.","Reads from an automatically established digital delay line.")),("delayw",("Writes the audio signal to a digital delay line.","Writes the audio signal to a digital delay line.")),("deltap",("Taps a delay line at variable offset times.","Tap a delay line at variable offset times.")),("deltap3",("Taps a delay line at variable offset times, uses cubic interpolation.","Taps a delay line at variable offset times, uses cubic interpolation.")),("deltapi",("Taps a delay line at variable offset times, uses interpolation.","Taps a delay line at variable offset times, uses interpolation.")),("deltapn",("Taps a delay line at variable offset times.","Tap a delay line at variable offset times.")),("deltapx",("Read from or write to a delay line with interpolation.","deltapx is similar to deltapi or deltap3. However, it allows higher quality interpolation. This opcode can read from and write to a delayr/delayw delay line with interpolation.")),("deltapxw",("Mixes the input signal to a delay line.","deltapxw mixes the input signal to a delay line. This opcode can be mixed with reading units (deltap, deltapn, deltapi, deltap3, and deltapx) in any order; the actual delay time is the difference of the read and write time. This opcode can read from and write to a delayr/delayw delay line with interpolation.")),("multitap",("Multitap delay line implementation.","Multitap delay line implementation.")),("vdelay",("An interpolating variable time delay.","This is an interpolating variable time delay, it is not very different from the existing implementation (deltapi), it is only easier to use.")),("vdelay3",("A variable time delay with cubic interpolation.","vdelay3 is experimental. It is the same as vdelay except that it uses cubic interpolation. (New in Version 3.50.)")),("vdelayx",("A variable delay opcode with high quality interpolation.","A variable delay opcode with high quality interpolation.")),("vdelayxq",("A 4-channel variable delay opcode with high quality interpolation.","A 4-channel variable delay opcode with high quality interpolation.")),("vdelayxs",("A stereo variable delay opcode with high quality interpolation.","A stereo variable delay opcode with high quality interpolation.")),("vdelayxw",("Variable delay opcodes with high quality interpolation.","Variable delay opcodes with high quality interpolation.")),("vdelayxwq",("Variable delay opcodes with high quality interpolation.","Variable delay opcodes with high quality interpolation.")),("vdelayxws",("Variable delay opcodes with high quality interpolation.","Variable delay opcodes with high quality interpolation.")),("bformdec",("Deprecated. Decodes an ambisonic B format signal.","Decodes an ambisonic B format signal into loudspeaker specific signals. Note that this opcode is\n      deprecated as it is inaccurate, and is replaced by the much\n      better opcode bformdec1 which replicates all\n      the important features.")),("bformdec1",("Decodes an ambisonic B format signal","Decodes an ambisonic B format signal into loudspeaker specific signals.")),("bformenc",("Deprecated. Codes a signal into the ambisonic B format.","Codes a signal into the ambisonic B format. Note that this opcode is\n      deprecated as it is inaccurate, and is replaced by the much\n      better\n      opcode bformenc1\n      which replicates all the important features; also note that the\n      gain arguments are not available in bformenc1.")),("bformenc1",("Codes a signal into the ambisonic B format.","Codes a signal into the ambisonic B format")),("hrtfearly",("Generates 3D binaural audio with high-fidelity early reflections in a parametric room using a Phase Truncation algorithm.","This opcode essentially nests the hrtfmove opcode in an image model for a user-definable shoebox-shaped room. A default room can be selected, or advanced room parameters can be used. Room surfaces can be controlled with high and low-frequency absorption coefficients and gain factors of a three-band equaliser.")),("hrtfmove",("Generates dynamic 3d binaural audio for headphones using magnitude interpolation and phase truncation.","This opcode takes a source signal and spatialises it in the 3 dimensional space around a listener\n      by convolving the source with stored head related transfer function (HRTF) based filters.")),("hrtfmove2",("Generates dynamic 3d binaural audio for headphones using a Woodworth based spherical head model\n      with improved low frequency phase accuracy.","This opcode takes a source signal and spatialises it in the 3 dimensional space around a listener\n      using head related transfer function (HRTF) based filters.")),("hrtfreverb",("A binaural, dynamic FDN based diffuse-field reverberator. The opcode works independently as an efficient, flexible reverberator.","A frequency-dependent, efficient reverberant field is created based on low and high frequency desired reverb times. The opcode is designed to work with hrtfearly, ideally using its outputs as inputs. However, hrtfreverb can be used as a standalone tool. Stability is enforced.")),("hrtfstat",("Generates static 3d binaural audio for headphones using a\n      Woodworth based spherical head model with improved low frequency\n      phase accuracy.","This opcode takes a source signal and spatialises it in the 3 dimensional space around a listener using head related transfer function (HRTF) based filters. It produces a static output (azimuth and elevation parameters are i-rate), because a static source allows much more efficient processing than hrtfmove and hrtfmove2,.")),("locsend",("Distributes the audio signals of a previous locsig opcode.","locsend depends upon the existence of a previously defined locsig. The number of output signals must match the number in the previous locsig. The output signals from locsend are derived from the values given for distance and reverb in the locsig and are ready to be sent to local or global reverb units (see example below). The reverb amount and the balance between the 2 or 4 channels are calculated in the same way as described in the Dodge book (an essential text!).")),("locsig",("Takes an input signal and distributes between 2 or 4 channels.","locsig takes an input signal and distributes it among 2 or 4 channels using values in degrees to calculate the balance between adjacent channels. It also takes arguments for distance (used to attenuate signals that are to sound as if they are some distance further than the loudspeaker itself), and for the amount the signal that will be sent to reverberators. This unit is based upon the example in the Charles Dodge/Thomas Jerse book, Computer Music, page 320.")),("pan",("Distribute an audio signal amongst four channels.","Distribute an audio signal amongst four channels with localization control.")),("pan2",("Distribute an audio signal across two channels.","Distribute an audio signal across two channels with a choice of methods.")),("space",("Distributes an input signal among 4 channels using cartesian coordinates.","space takes an input signal and distributes it among 4 channels using Cartesian xy coordinates to calculate the balance of the outputs. The xy coordinates can be defined in a separate text file and accessed through a Function statement in the score using Gen28, or they can be specified using the optional kx, ky arguments. The advantages to the former are:")),("spat3d",("Positions the input sound in a 3D space and allows moving the sound at k-rate.","This opcode positions the input sound in a 3D space, with optional simulation of room acoustics, in various output formats. spat3d allows moving the sound at k-rate (this movement is interpolated internally to eliminate \"zipper noise\" if sr not equal to kr).")),("spat3di",("Positions the input sound in a 3D space with the sound source position set at i-time.","This opcode positions the input sound in a 3D space, with optional simulation of room acoustics, in various output formats. With spat3di, sound source position is set at i-time.")),("spat3dt",("Can be used to render an impulse response for a 3D space at i-time.","This opcode positions the input sound in a 3D space, with optional simulation of room acoustics, in various output formats. spat3dt can be used to render the impulse response at i-time, storing output in a function table, suitable for convolution.")),("spdist",("Calculates distance values from xy coordinates.","spdist uses the same xy data as space, also either from a text file using Gen28 or from x and y arguments given to the unit directly. The purpose of this unit is to make available the values for distance that are calculated from the xy coordinates.")),("spsend",("Generates output signals based on a previously defined space opcode.","spsend depends upon the existence of a previously defined space. The output signals from spsend are derived from the values given for xy and reverb in the space and are ready to be sent to local or global reverb units (see example below).")),("vbap",("Distributes an audio signal among many channels.","Distributes an audio signal amongmany channels, up to 64 in the\n      first form, arbitrary in the second.")),("vbap16",("Distributes an audio signal among 16 channels.","Distributes an audio signal among 16 channels.")),("vbap16move",("Distribute an audio signal among 16 channels with moving virtual sources.","Distribute an audio signal among 16 channels with moving virtual sources.")),("vbap4",("Distributes an audio signal among 4 channels.","Distributes an audio signal among 4 channels.")),("vbap4move",("Distributes an audio signal among 4 channels with moving virtual sources.","Distributes an audio signal among 4 channels with moving virtual sources.")),("vbap8",("Distributes an audio signal among 8 channels.","Distributes an audio signal among 8 channels.")),("vbap8move",("Distributes an audio signal among 8 channels with moving virtual sources.","Distributes an audio signal among 8 channels with moving virtual sources.")),("vbapg",("Calculates the gains for a sound location between multiple channels.","Calculates the gains for a sound location for up to 64.")),("vbapgmove",("Calculates the gains for a sound location between multiple\n      channels with moving virtual sources.","Calculates the gains for a sound location between multiple\n      channels with moving virtual sources.")),("vbaplsinit",("Configures VBAP output according to loudspeaker parameters.","Configures VBAP output according to loudspeaker parameters.")),("vbapmove",("Distributes an audio signal among many channels with moving virtual sources.","Distributes an audio signal among upto 64 channels with moving\n      virtual sources.")),("vbapz",("Writes a multi-channel audio signal to a ZAK array.","Writes a multi-channel audio signal to a ZAK array.")),("vbapzmove",("Writes a multi-channel audio signal to a ZAK array with moving virtual sources.","Writes a multi-channel audio signal to a ZAK array with moving virtual sources.")),("alpass",("Reverberates an input signal with a flat frequency response.","Reverberates an input signal with a flat frequency response.")),("babo",("A physical model reverberator.","babo  stands  for  ball-within-the-box.   It is a physical model reverberator based on the paper by Davide  Rocchesso \"The  Ball  within  the Box: a sound-processing metaphor\", Computer Music Journal,  Vol  19,  N.4,  pp.45-47,  Winter 1995.")),("comb",("Reverberates an input signal with a \226\128\156colored\226\128\157 frequency response.","Reverberates an input signal with a \226\128\156colored\226\128\157 frequency response.")),("combinv",("Reverberates an input signal with a \226\128\156colored\226\128\157 frequency response.","Reverberates an input signal with a \226\128\156colored\226\128\157\n      frequency response with a FIR filter.")),("freeverb",("Opcode version of Jezar's Freeverb","freeverb is a stereo reverb unit based on Jezar's public domain\n\t\tC++ sources, composed of eight parallel comb filters on both\n\t\tchannels, followed by four allpass units in series. The filters\n\t\ton the right channel are slightly detuned compared to the left\n\t\tchannel in order to create a stereo effect.")),("nestedap",("Three different nested all-pass filters.","Three different nested all-pass filters, useful for implementing reverbs.")),("nreverb",("A reverberator consisting of 6 parallel comb-lowpass filters.","This is a reverberator consisting of 6 parallel comb-lowpass filters being fed into a series of 5 allpass filters. nreverb replaces reverb2 (version 3.48) and so both opcodes are identical.")),("platerev",("Models the reverberation of a metal plate.","Models the reverberation of a rectangular metal plate with\n      settable physical characteristics when excited by audio signal(s).")),("reverb",("Reverberates an input signal with a \226\128\156natural room\226\128\157 frequency response.","Reverberates an input signal with a \226\128\156natural room\226\128\157 frequency response.")),("reverb2",("Same as the nreverb opcode.","Same as the nreverb opcode.")),("reverbsc",("8 delay line stereo FDN reverb, based on work by Sean Costello","8 delay line stereo FDN reverb, with feedback matrix based upon physical\n\t\tmodeling scattering junction of 8 lossless waveguides of equal characteristic\n\t\timpedance. Based on Csound orchestra version by Sean Costello.")),("valpass",("Variably reverberates an input signal with a flat frequency response.","Variably reverberates an input signal with a flat frequency response.")),("vcomb",("Variably reverberates an input signal with a \226\128\156colored\226\128\157 frequency response.","Variably reverberates an input signal with a \226\128\156colored\226\128\157 frequency response.")),("denorm",("Mixes low level noise to a list of a-rate signals","Mixes low level (~1e-20 for floats, and ~1e-56 for doubles)\n    \tnoise to a list of a-rate signals. Can be used before IIR\n    \tfilters and reverbs to avoid denormalized numbers which may\n    \totherwise result in significantly increased CPU usage.")),("diff",("Modify a signal by differentiation.","Modify a signal by differentiation.")),("downsamp",("Modify a signal by down-sampling.","Modify a signal by down-sampling.")),("fold",("Adds artificial foldover to an audio signal.","Adds artificial foldover to an audio signal.")),("integ",("Modify a signal by integration.","Modify a signal by integration.")),("interp",("Converts a control signal to an audio signal using linear interpolation.","Converts a control signal to an audio signal using linear interpolation.")),("ntrpol",("Calculates the weighted mean value of two input signals.","Calculates the weighted mean value (i.e. linear interpolation) of two input signals")),("samphold",("Performs a sample-and-hold operation on its input.","Performs a sample-and-hold operation on its input.")),("upsamp",("Modify a signal by up-sampling.","Modify a signal by up-sampling.")),("vaget",("Access values of the current buffer of an a-rate variable by indexing.","Access values of the current buffer of an a-rate variable by indexing.\n      Useful for doing sample-by-sample manipulation at k-rate without using\n      setksmps 1.")),("vaset",("Write value of into the current buffer of an a-rate variable by index.","Write values into the current buffer of an a-rate variable at the given\n      index.  Useful for doing sample-by-sample manipulation at k-rate without\n      using setksmps 1.")),("limit",("Sets the lower and upper limits of the value it processes.","Sets the lower and upper limits of the value it processes.")),("mirror",("Reflects the signal that exceeds the low and high thresholds.","Reflects the signal that exceeds the low and high thresholds.")),("wrap",("Wraps-around the signal that exceeds the low and high thresholds.","Wraps-around the signal that exceeds the low and high thresholds.")),("distort",("Distort an audio signal via waveshaping and optional clipping.","Distort an audio signal via waveshaping and optional clipping.")),("distort1",("Modified hyperbolic tangent distortion.","Implementation of modified hyperbolic tangent distortion. distort1 can be used to generate wave shaping distortion based on a modification of the tanh function.")),("flanger",("A user controlled flanger.","A user controlled flanger.")),("harmon",("Analyze an audio input and generate harmonizing voices in synchrony.","Analyze an audio input and generate harmonizing voices in synchrony.")),("harmon2",("Analyze an audio input and generate harmonizing voices in\n      synchrony with formants preserved.","Generate harmonizing voices with formants preserved.")),("harmon3",("Analyze an audio input and generate harmonizing voices in\n      synchrony with formants preserved.","Generate harmonizing voices with formants preserved.")),("harmon4",("Analyze an audio input and generate harmonizing voices in\n      synchrony with formants preserved.","Generate harmonizing voices with formants preserved.")),("phaser1",("First-order allpass filters arranged in a series.","An implementation of iord number of first-order allpass filters in series.")),("phaser2",("Second-order allpass filters arranged in a series.","An implementation of iord number of second-order allpass filters in series.")),("atone",("A hi-pass filter whose transfer functions are the complements of the tone opcode.","A hi-pass filter whose transfer functions are the complements of the tone opcode.")),("atonex",("Emulates a stack of filters using the atone opcode.","atonex is equivalent to a filter consisting of more layers of atone with the same arguments, serially connected. Using a stack of a larger number of filters allows a sharper cutoff. They are faster than using a larger number instances in a Csound orchestra of the old opcodes, because only one initialization and k- cycle are needed at time and the audio loop falls entirely inside the cache memory of processor.")),("biquad",("A sweepable general purpose biquadratic digital filter.","A sweepable general purpose biquadratic digital filter.")),("biquada",("A sweepable general purpose biquadratic digital filter with a-rate parameters.","A sweepable general purpose biquadratic digital filter.")),("butbp",("Same as the butterbp opcode.","Same as the butterbp opcode.")),("butbr",("Same as the butterbr opcode.","Same as the butterbr opcode.")),("buthp",("Same as the butterhp opcode.","Same as the butterhp opcode.")),("butlp",("Same as the butterlp opcode.","Same as the butterlp opcode.")),("butterbp",("A band-pass Butterworth filter.","Implementation of a second-order band-pass Butterworth filter. This opcode can also be written as butbp.")),("butterbr",("A band-reject Butterworth filter.","Implementation of a second-order band-reject Butterworth filter. This opcode can also be written as butbr.")),("butterhp",("A high-pass Butterworth filter.","Implementation of second-order high-pass Butterworth filter. This opcode can also be written as buthp.")),("butterlp",("A low-pass Butterworth filter.","Implementation of a second-order low-pass Butterworth filter. This opcode can also be written as butlp.")),("clfilt",("Implements low-pass and high-pass filters of different styles.","Implements the classical standard analog filter types: low-pass and high-pass. They are implemented with the four classical kinds of filters: Butterworth, Chebyshev Type I, Chebyshev Type II, and Elliptical.  The number of poles may be any even number from 2 to 80.")),("diode_ladder",("Zero-delay feedback implementation of 4 pole diode ladder filter.","Zero-delay feedback implementation of a 4 pole (24 dB/oct) diode low-pass filter. This filter design was originally used in the EMS VCS3 and was the resonant filter in the Roland TB-303.")),("doppler",("A fast and robust method for approximating sound propagation, achieving convincing Doppler shifts without having to solve equations.","A fast and robust method for approximating sound propagation, achieving convincing Doppler shifts without having to solve equations. The method computes frequency shifts based on reading an input delay line at a delay time computed from the distance between source and mic and the speed of sound. One instance of the opcode is required for each dimension of space through which the sound source moves. If the source sound moves at a constant speed from in front of the microphone, through the microphone, to behind the microphone, then the output will be frequency shifted above the source frequency at a constant frequency while the source approaches, then discontinuously will be shifted below the source frequency at a constant frequency as the source recedes from the microphone. If the source sound moves at a constant speed through a point to one side of the microphone, then the rate of change of position will not be constant, and the familiar Doppler frequency shift typical of a siren or engine approaching and receding along a road beside a listener will be heard.")),("K35_hpf",("Zero-delay feedback implementation of Korg35 resonant high-pass filter.","Zero-delay feedback implementation of Korg35 resonant high-pass filter. This filter design is found in the Korg MS10 early MS20.")),("K35_lpf",("Zero-delay feedback implementation of Korg35 resonant low-pass filter.","Zero-delay feedback implementation of Korg35 resonant low-pass filter. This filter design is found in the Korg MS10, early MS20, and Monotron series.")),("median",("A median filter, a variant FIR lowpass filter.","Implementation of a median filter.")),("mediank",("A median filter, a variant FIR lowpass filter.","Implementation of a median filter.")),("mode",("A filter that simulates a mass-spring-damper system","Filters the incoming signal with the specified resonance frequency and\n      quality factor. It can also be seen as a signal generator for high quality\n      factor, with an impulse for the excitation. You can combine several modes\n      to built complex instruments such as bells or guitar tables.")),("tone",("A first-order recursive low-pass filter with variable frequency response.","A first-order recursive low-pass filter with variable frequency response.")),("tonex",("Emulates a stack of filters using the tone opcode.","tonex is equivalent to a filter consisting of more layers of tone with the same arguments, serially connected. Using a stack of a larger number of filters allows a sharper cutoff. They are faster than using a larger number instances in a Csound orchestra of the old opcodes, because only one initialization and k- cycle are needed at time and the audio loop falls entirely inside the cache memory of processor.")),("zdf_1pole",("Zero-delay feedback implementation of 1 pole filter.","Zero-delay feedback implementation of a 1 pole (6 dB/oct) filter. Offers low-pass (default), high-pass, and allpass output modes.")),("zdf_1pole_mode",("Zero-delay feedback implementation of 1 pole filter with multimode output.","Zero-delay feedback implementation of a 1 pole (6 dB/oct) filter. Offers low-pass and high-pass output.")),("zdf_2pole",("Zero-delay feedback implementation of 2 pole filter.","Zero-delay feedback implementation of a 2 pole (12 dB/oct) filter. Offers low-pass (default), high-pass, and allpass output modes.")),("zdf_2pole_mode",("Zero-delay feedback implementation of 2 pole filter with multimode output.","Zero-delay feedback implementation of a 2 pole (12 dB/oct) filter. Offers low-pass,\n      band-pass, and high-pass output.")),("zdf_ladder",("Zero-delay feedback implementation of 4 pole ladder filter.","Zero-delay feedback implementation of a 4 pole (24 dB/oct) low-pass filter based on the Moog ladder filter.")),("areson",("A notch filter whose transfer functions are the complements of\n      the reson opcode.","A notch filter whose transfer functions are the complements of\n      the reson opcode.")),("bqrez",("A second-order multi-mode filter.","A second-order multi-mode filter.")),("lowpass2",("A resonant lowpass filter.","Implementation of a resonant second-order lowpass filter.")),("lowres",("Another resonant lowpass filter.","lowres is a resonant lowpass filter.")),("lowresx",("Simulates layers of serially connected resonant lowpass filters.","lowresx is equivalent to more layers of lowres with the same arguments serially connected.")),("lpf18",("A 3-pole sweepable resonant lowpass filter.","Implementation of a 3 pole sweepable resonant lowpass filter.")),("moogladder",("Moog ladder lowpass filter.","Moogladder is an new digital implementation of the Moog ladder filter based on \nthe work of Antti Huovilainen, described in the paper \"Non-Linear Digital \nImplementation of the Moog Ladder Filter\" (Proceedings of DaFX04, Univ of Napoli). \nThis implementation is probably a more accurate digital representation of \nthe original analogue filter.")),("moogladder2",("Moog ladder lowpass filter.","Moogladder2 is an new digital implementation of the Moog ladder filter based on \nthe work of Antti Huovilainen, described in the paper \"Non-Linear Digital \nImplementation of the Moog Ladder Filter\" (Proceedings of DaFX04, Univ of Napoli). \nThis implementation uses approximations to the tanh function and so is\nfaster but less accurate than moogladder.")),("moogvcf",("A digital emulation of the Moog diode ladder filter configuration.","A digital emulation of the Moog diode ladder filter configuration.")),("moogvcf2",("A digital emulation of the Moog diode ladder filter configuration.","A digital emulation of the Moog diode ladder filter configuration.")),("mvchpf",("Moog voltage-controlled highpass filter emulation.","Mvchpf is an digital implementation of the 4th-order (24 dB/oct)  Moog\nhigh-pass filter, originally written by Fons Andriaensen. According to the author,\nmvchpf \"...is based on the voltage controlled highpass filter by Robert Moog.\nagain with some attention to the nonlinear effects.\"")),("mvclpf1",("Moog voltage-controlled lowpass filter emulation.","Mvclpf1 is an digital implementation of the 4th-order (24 dB/oct)  Moog ladder filter\noriginally written by Fons Andriaensen. According to the author,\nmvclpf1 \"is a fairly simple design, and it does not even pretend to come\nclose the 'real thing'. It uses a very crude approximation of the non-linear\nresistor in the first filter section only. [...] [I]t's [a] cheap (in\nterms of CPU usage) general purpose 24 dB/oct lowpass\nfilter that could be useful\".")),("mvclpf2",("Moog voltage-controlled lowpass filter emulation.","Mvclpf2 is an digital implementation of the 4th-order (24 dB/oct) Moog ladder filter\noriginally written by Fons Andriaensen. According to the author,\nmvclpf2 \"uses five non-linear elements, in the input and in all four filter\nsections. It works by using the derivative of the nonlinearity (for which\n1 / (1 + x * x) is reasonable approximation). The main advantage of this is\nthat only one evaluation of the non-linear function is required for each\nsection\".")),("mvclpf3",("Moog voltage-controlled lowpass filter emulation.","Mvclpf3 is an digital implementation of the 4th-order (24 dB/oct) Moog ladder filter\noriginally written by Fons Andriaensen. According to the author,\nmvclpf3 \"is based on mvclpf2 , with two differences. It uses the\nthe technique described by Stilson and Smith to extend the constant-Q\nrange, and the internal sample frequency is doubled, giving a better\napproximation to the non-linear behaviour at high freqencies.\nThis version has high Q over the entire frequency range and will\noscillate up to above 10 kHz, while the two others show a decreasing\nQ at high frequencies. Mvclpf3  is reasonably well tuned, and can be\n'played' as a VCO up to at least 5 kHz\".")),("mvclpf4",("Moog voltage-controlled lowpass filter emulation.","Mvclpf4 is an digital implementation of the 4th-order (24 dB/oct) Moog ladder filter\noriginally written by Fons Andriaensen. It is a version of the\nmvclpf3 opcode with four outputs, for 6dB, 12dB, 18dB, and\n24 dB/octave responses.")),("reson",("A second-order resonant filter.","A second-order resonant filter.")),("resonr",("A bandpass filter with variable frequency response.","Implementations of a second-order, two-pole two-zero bandpass filter with variable frequency response.")),("resonx",("Emulates a stack of filters using the reson opcode.","resonx is equivalent to a filters consisting of more layers of reson with the same arguments, serially connected. Using a stack of a larger number of filters allows a sharper cutoff. They are faster than using a larger number instances in a Csound orchestra of the old opcodes, because only one initialization and k- cycle are needed at time and the audio loop falls entirely inside the cache memory of processor.")),("resony",("A bank of second-order bandpass filters, connected in parallel.","A bank of second-order bandpass filters, connected in parallel.")),("resonz",("A bandpass filter with variable frequency response.","Implementations of a second-order, two-pole two-zero bandpass filter with variable frequency response.")),("rezzy",("A resonant low-pass filter.","A resonant low-pass filter.")),("statevar",("State-variable filter.","Statevar is a new digital implementation of the analogue state-variable filter. \nThis filter has four simultaneous outputs: high-pass, low-pass,\nband-pass and band-reject. This filter uses oversampling for sharper\nresonance (default: 3 times oversampling). It includes a\nresonance limiter that prevents the filter from getting unstable.")),("svfilter",("A resonant second order filter, with simultaneous lowpass, highpass and bandpass outputs.","Implementation of a resonant second order filter, with simultaneous lowpass, highpass and bandpass outputs.")),("tbvcf",("Models some of the filter characteristics of a Roland TB303 voltage-controlled filter.","This opcode attempts to model some of the filter characteristics of a Roland TB303 voltage-controlled filter. Euler's method is used to approximate the system, rather than traditional filter methods. Cutoff frequency, Q, and distortion are all coupled. Empirical methods were used to try to unentwine,  but frequency is only approximate as a result. Future fixes for some problems with this opcode may break existing orchestras relying on this version of tbvcf.")),("vlowres",("A bank of filters in which the cutoff frequency can be separated under user control.","A bank of filters in which the cutoff frequency can be separated under user control")),("aresonk",("A notch filter whose transfer functions are the complements of the reson opcode.","A notch filter whose transfer functions are the complements of the reson opcode.")),("atonek",("A hi-pass filter whose transfer functions are the complements of the tonek opcode.","A hi-pass filter whose transfer functions are the complements of the tonek opcode.")),("lineto",("Generate glissandos starting from a control signal.","Generate glissandos starting from a control signal.")),("port",("Applies portamento to a step-valued control signal.","Applies portamento to a step-valued control signal.")),("portk",("Applies portamento to a step-valued control signal.","Applies portamento to a step-valued control signal.")),("resonk",("A second-order resonant filter.","A second-order resonant filter.")),("resonxk",("Control signal resonant filter stack.","resonxk is equivalent to a group of resonk filters, with the same arguments, serially connected. Using a stack of a larger number of filters allows a sharper cutoff.")),("sc_lag",("Exponential Lag","Exponential lag with 60dB lag time. Port of Supercollider's Lag")),("sc_lagud",("Exponential Lag","Exponential lag with different smoothing time for up- and\n\t  downgoing signals. Port of Supercollider's LagUD")),("sc_trig",("Timed trigger","Timed trigger. Port of Supercollider's Trig ugen")),("tlineto",("Generate glissandos starting from a control signal.","Generate glissandos starting from a control signal with a trigger.")),("tonek",("A first-order recursive low-pass filter with variable frequency response.","A first-order recursive low-pass filter with variable frequency response.")),("dcblock",("A DC blocking filter.","Implements the DC blocking filter")),("dcblock2",("A DC blocking filter.","Implements a DC blocking filter with improved DC attenuation.")),("eqfil",("Equalizer filter","The opcode eqfil is a 2nd order tunable equalisation filter based on Regalia and Mitra\n      design (\"Tunable Digital Frequency Response Equalization Filters\", IEEE Trans.\n      on Ac., Sp. and Sig Proc., 35 (1), 1987). It provides a peak/notch filter for\n      building parametric/graphic equalisers.")),("filter2",("Performs filtering using a transposed form-II digital filter lattice with no time-varying control.","General purpose custom filter with no time-varying pole control. The filter coefficients implement the following difference equation:")),("fmanal",("AM/FM analysis from quadrature signal.","This opcode attempts to extract the AM and FM signals off a\n      quadrature signal (e.g. from a Hilbert transform).")),("fofilter",("Formant filter.","Fofilter generates a stream of overlapping sinewave grains, when fed with \na pulse train. Each grain is the impulse response of a combination of \ntwo BP filters. The grains are defined by their attack time (determining \nthe skirtwidth of the formant region at -60dB) and decay time \n(-6dB bandwidth). Overlapping will occur when 1/freq < decay, but, \nunlike FOF, there is no upper limit on the number of overlaps. \nThe original idea for this opcode came from J McCartney's formlet class \nin SuperCollider, but this is possibly implemented differently(?).")),("hilbert",("A Hilbert transformer.","An IIR implementation of a Hilbert transformer.")),("hilbert2",("A Hilbert rransformer.","A DFT-based implementation of a Hilbert transformer.")),("nlfilt",("A filter with a non-linear effect.","Implements the filter:")),("nlfilt2",("A filter with a non-linear effect and blowup protection.","Implements the filter:")),("pareq",("Implementation of Zoelzer's parametric equalizer filters.","Implementation of Zoelzer's parametric equalizer filters, with some modifications by the author.")),("rbjeq",("Parametric equalizer and filter opcode with 7 filter types, based\n      on algorithm by Robert Bristow-Johnson.","Parametric equalizer and filter opcode with 7 filter types,\n    \tbased on algorithm by Robert Bristow-Johnson.")),("zfilter2",("Performs filtering using a transposed form-II digital filter lattice with radial pole-shearing and angular pole-warping.","General purpose custom filter with time-varying pole control. The filter coefficients implement the following difference equation:")),("wguide1",("A simple waveguide model consisting of one delay-line and one first-order lowpass filter.","A simple waveguide model consisting of one delay-line and one first-order lowpass filter.")),("wguide2",("A model of beaten plate consisting of two parallel delay-lines and two first-order lowpass filters.","A model of beaten plate consisting of two parallel delay-lines and two first-order lowpass filters.")),("chebyshevpoly",("Efficiently evaluates the sum of Chebyshev polynomials of arbitrary order.","The chebyshevpoly opcode calculates the value of a polynomial expression with a single a-rate input variable that is made up of a linear combination of the first N Chebyshev polynomials of the first kind.  Each Chebyshev polynomial, Tn(x), is weighted by a k-rate coefficient, kn, so that the opcode is calculating a sum of any number of terms in the form kn*Tn(x).  Thus, the chebyshevpoly opcode allows for the waveshaping of an audio signal with a dynamic transfer function that gives precise control over the harmonic content of the output.")),("pdclip",("Performs linear clipping on an audio signal or a phasor.","The pdclip opcode allows a percentage of the input range of a signal to be clipped to fullscale. It is similar to simply multiplying the signal and limiting the range of the result, but pdclip allows you to think about how much of the signal range is being distorted instead of the scalar factor and has a offset parameter for assymetric clipping of the signal range. pdclip is also useful for remapping phasors for phase distortion synthesis.")),("pdhalf",("Distorts a phasor for reading the two halves of a table at different rates.","The pdhalf opcode is designed to emulate the \"classic\" phase distortion synthesis method of the Casio CZ-series of synthesizers from the mid-1980's.  This technique reads the first and second halves of a function table at different rates in order to warp the waveform.  For example, pdhalf can smoothly transform a sine wave into something approximating the shape of a saw wave.")),("pdhalfy",("Distorts a phasor for reading two unequal portions of a table in equal periods.","The pdhalfy opcode is a variation on the phase distortion synthesis method of the pdhalf opcode.  It is useful for distorting a phasor in order to read two unequal portions of a table in the same number of samples.")),("powershape",("Waveshapes a signal by raising it to a variable exponent.","The powershape opcode raises an input signal to a power with pre- and post-scaling of the signal so that the output will be in a predictable range.  It also processes negative inputs in a symmetrical way to positive inputs, calculating a dynamic transfer function that is useful for waveshaping.")),("cmp",("Compares two audio signals","Compares two audio signals using the standard math operators")),("max",("Produces a signal that is the maximum of any number of input signals.","The max opcode takes any number of a-rate,\n      k-rate or i-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the maximum of all of the inputs.  For a-rate signals, the inputs are compared one sample at a time (i.e. max does not scan an entire ksmps period of a signal for its local maximum as the max_k opcode does).")),("max_k",("Local maximum (or minimum) value of an incoming asig signal","max_k outputs the local maximum (or minimum) value of  the incoming asig signal, checked in the time interval between ktrig has become true twice.")),("maxabs",("Produces a signal that is the maximum of the absolute values of any number of input signals.","The maxabs opcode takes any number of a-rate or k-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the maximum of all of the inputs.  It is identical to the max opcode except that it takes the absolute value of each input before comparing them.  Therefore, the output is always non-negative.  For a-rate signals, the inputs are compared one sample at a time (i.e. maxabs does not scan an entire ksmps period of a signal for its local maximum as the max_k opcode does).")),("maxabsaccum",("Accumulates the maximum of the absolute values of audio signals.","maxabsaccum compares two audio-rate variables and stores the maximum of their absolute values into the first.")),("maxaccum",("Accumulates the maximum value of audio signals.","maxaccum compares two audio-rate variables and stores the maximum value between them into the first.")),("min",("Produces a signal that is the minimum of any number of input signals.","The min opcode takes any number of a-rate,\n      k-rate or i-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the minimum of all of the inputs.  For a-rate signals, the inputs are compared one sample at a time (i.e. min does not scan an entire ksmps period of a signal for its local minimum as the max_k opcode does).")),("minabs",("Produces a signal that is the minimum of the absolute values of any number of input signals.","The minabs opcode takes any number of a-rate or k-rate signals as input (all of the same rate), and outputs a signal at the same rate that is the minimum of all of the inputs.  It is identical to the min opcode except that it takes the absolute value of each input before comparing them.  Therefore, the output is always non-negative.    For a-rate signals, the inputs are compared one sample at a time (i.e. minabs does not scan an entire ksmps period of a signal for its local minimum as the max_k opcode does).")),("minabsaccum",("Accumulates the minimum of the absolute values of audio signals.","minabsaccum compares two audio-rate variables and stores the minimum of their absolute values into the first.")),("minaccum",("Accumulates the minimum value of audio signals.","minaccum compares two audio-rate variables and stores the minimum value between them into the first.")),("clockoff",("Stops one of a number of internal clocks.","Stops one of a number of internal clocks.")),("clockon",("Starts one of a number of internal clocks.","Starts one of a number of internal clocks.")),("compilecsd",("compiles a new orchestra from an ASCII file","Compilecsd will read a CSD file and compile one or more instruments at init time, which will be added to the running engine. In case of existing instrument numbers or names, these will be replaced, but any instance still running of the old instrument definition will still perform until it terminates. In addition, it will read the score (if it exists) contained in the CSD file and add it to the list of events to be performed by Csound. The opcode ignores any section in the CSD file that is not the orchestra or the score.")),("compileorc",("compiles a new orchestra from an ASCII file","Compileorc will compile one or more instruments at init time, which will be added to the running engine. In case of\nexisting instrument numbers or names, these will be replaced, but any instance still running of the old instrument\ndefinition will still perform until it terminates.")),("compilestr",("compiles a new orchestra passed in as an ASCII string","Compilestr will compile one or more instruments at init time, which will be added to the running engine. In case of\nexisting instrument numbers or names, these will be replaced, but any instance still running of the old instrument\ndefinition will still perform until it terminates. Only new instances will use the new definition.\nMulti-line strings are accepted, using {{  }} to enclose the string.")),("evalstr",("Evalstrs evaluates a string containing Csound code, returning a value.","Evalstr compiles and runs Csound code and returns a value from the global space (instr 0). This opcode can be\nalso used to compile new instruments (as compilestr).")),("ihold",("Creates a held note.","Causes a finite-duration note to become a \226\128\156held\226\128\157 note")),("turnoff",("Enables an instrument to turn itself off or to turn an instance of another instrument off.","Enables an instrument to turn itself off or to turn an instance of another instrument off.")),("turnon",("Activate an instrument for an indefinite time.","Activate an instrument for an indefinite time.")),("event",("Generates a score event from an instrument.","Generates a score event from an instrument.")),("event_i",("Generates a score event from an instrument.","Generates a score event from an instrument.")),("mute",("Mutes/unmutes new instances of a given instrument.","Mutes/unmutes new instances of a given instrument.")),("nstance",("Schedules a new instrument instance, storing the instance handle in a variable.","Schedules a new instrument nstance, returning a handle that can be used later to\nrefer directly to the running nstance. This opcode is similar to schedule, but has the added\nfacility of retrieving the nstance handle.")),("readscore",("Read, preprocess and schedule a score from an input string.","Readscore will issue one or more score events. \n\t  It can handle strings in the same conditions as\n\t  the standard score, including preprocessing (carry, sort, ramp, etc). \nMulti-line strings are accepted, using {{  }} to enclose the string.")),("remove",("Removes the definition of an instrument.","Removes the definition of an instrument as long as it is not in use.")),("schedkwhen",("Adds a new score event generated by a k-rate trigger.","Adds a new score event generated by a k-rate trigger.")),("schedkwhennamed",("Similar to schedkwhen but uses a named instrument at init-time.","Similar to schedkwhen but uses a named instrument at init-time.")),("schedule",("Adds a new score event.","Adds a new score event.")),("schedwhen",("Adds a new score event.","Adds a new score event.")),("scoreline",("Issues one or more score line events from an instrument.","Scoreline will issue one or more score events, if ktrig is 1 every k-period. \n\t  It can handle strings in the same conditions as\n\t  the standard score. Multi-line strings are accepted, using {{  }} to enclose the string.")),("scoreline_i",("Issues one or more score line events from an instrument at i-time.","scoreline_i will issue score events at i-time.  It can handle strings in the same conditions as the standard score. Multi-line strings are accepted, using {{  }} to enclose the string.")),("active",("Returns the number of active instances of an instrument.","Returns the number of active instances of an instrument with\n      options to ignore releasing instances.")),("cpumeter",("Reports the usage of cpu either total or per core.","Reports the usage of cpu either total or per core to monitor how\n      close to max-out the processing is.")),("cpuprc",("Control allocation of cpu resources on a per-instrument basis, to optimize realtime output.","Control allocation of cpu resources on a per-instrument basis, to optimize realtime output.")),("exitnow",("Exit Csound as fast as possible, with no cleaning up.","In Csound4 calls an exit function to leave Csound as fast as\n    possible. On Csound5 exits back to the driving code.")),("jacktransport",("Start/stop jack_transport and can optionally relocate the playback head.","Start/stop jack_transport and can optionally relocate the playback head.")),("maxalloc",("Limits the number of allocations of an instrument.","Limits the number of allocations of an instrument.")),("prealloc",("Creates space for instruments but does not run them.","Creates space for instruments but does not run them.")),("button",("Sense on-screen controls.","Sense on-screen controls. Requires Winsound or TCL/TK.")),("changed",("k-rate signal change detector.","This opcode outputs a trigger signal that informs when any one of its k-rate arguments has changed. Useful with valuator widgets or MIDI controllers.")),("changed2",("k-rate signal change detector.","This opcode outputs a trigger signal that informs when any one\n        of its k-rate arguments has changed, or a value in an array. Useful with valuator widgets or MIDI controllers.")),("checkbox",("Sense on-screen controls.","Sense on-screen controls. Requires Winsound or TCL/TK.")),("control",("Configurable slider controls for realtime user input.","Configurable slider controls for realtime user input. Requires Winsound or TCL/TK. control reads a slider's value.")),("follow",("Envelope follower unit generator.","Envelope follower unit generator.")),("follow2",("Another controllable envelope extractor.","A controllable envelope extractor using the algorithm attributed to Jean-Marc Jot.")),("getcfg",("Return Csound settings.","Return various configuration settings in Svalue as a string at init time.")),("joystick",("Reads data from a joystick controller.","Reads data from a Linux joystick controller")),("metro",("Trigger Metronome","Generate a metronomic signal to be used in any circumstance an isochronous trigger is needed.")),("midifilestatus",("Returns the playback status of MIDI file input.","Returns the current playback status at k-rate, of the input MIDI file, 1 if file is playing, 0 if the end-of-the file\nhas been reached.")),("miditempo",("Returns the current tempo at k-rate, of either the MIDI file (if available) or the score","Returns the current tempo at k-rate, of either the MIDI file (if available) or the score")),("p5gconnect",("Reads data from a P5 Glove controller.","Opens and at control-rate polls a P5 Glove controller.")),("p5gdata",("Reads data fields from an external P5 Glove.","Reads data fields from a P5 Glove controller.")),("pcount",("Returns the number of pfields belonging to a note event.","pcount returns the number of pfields belonging to a note event.")),("peak",("Maintains the output equal to the highest absolute value received.","These opcodes maintain the output k-rate variable as the peak absolute level so far received.")),("pindex",("Returns the value of a specified pfield.","pindex returns the value of a specified pfield.")),("pitch",("Tracks the pitch of a signal.","Using the same techniques as spectrum and specptrk, pitch tracks the pitch of the signal in octave point decimal form, and amplitude in dB.")),("pitchamdf",("Follows the pitch of a signal based on the AMDF method.","Follows the pitch of a signal based on the AMDF method (Average Magnitude Difference Function). Outputs pitch and amplitude tracking signals. The method is quite fast and should run in realtime. This technique usually works best for monophonic signals.")),("plltrack",("Tracks the pitch of a signal.","plltrack, a pitch tracker based on a phase-locked loop algorithm, described in Zolzer, U, Sankarababu, S.V. and Moller, S, \"PLL-based Pitch Detection and Tracking for Audio Signals. Proc. of IIH-MSP 2012\".")),("ptrack",("Tracks the pitch of a signal.","ptrack takes an input signal, splits it into ihopsize blocks and using a STFT method, extracts an estimated pitch for its fundamental frequency as well as estimating the total amplitude of the signal in dB, relative to full-scale (0dB). The method implies an analysis window size of 2*ihopsize samples (overlaping by 1/2 window), which has to be a power-of-two, between 128 and 8192 (hopsizes between 64 and 4096). Smaller windows will give better time precision, but worse frequency accuracy (esp. in low fundamentals).This opcode is based on an original algorithm by M. Puckette.")),("readscratch",("returns a value stored in the instance of an instrument.","The readscratch opcode returns one of four\n      scalar values stored in the instance of an instrument.")),("rewindscore",("Rewinds the playback position of the current score performance.","Rewinds the playback position of the current score performance..")),("rms",("Determines the root-mean-square amplitude of an audio signal.","Determines the root-mean-square amplitude of an audio signal. It low-pass filters the actual value, to average in the manner of a VU meter.")),("sensekey",("Returns the ASCII code of a key that has been pressed.","Returns the ASCII code of a key that has been pressed, or -1 if no key has been pressed.")),("seqtime",("Generates a trigger signal according to the values stored in a table.","Generates a trigger signal according to the values stored in a table.")),("seqtime2",("Generates a trigger signal according to the values stored in a table.","Generates a trigger signal according to the values stored in a table.")),("setctrl",("Configurable slider controls for realtime user input.","Configurable slider controls for realtime user input. Requires Winsound or TCL/TK. setctrl sets a slider to a specific value, or sets a minimum or maximum range.")),("setscorepos",("Sets the playback position of the current score performance to a given position.","Sets the playback position of the current score performance to a given position.")),("splitrig",("Split a trigger signal","splitrig splits a trigger signal (i.e. a timed sequence of control-rate impulses) into several channels following a structure designed by the user.")),("tempest",("Estimate the tempo of beat patterns in a control signal.","Estimate the tempo of beat patterns in a control signal.")),("tempo",("Apply tempo control to an uninterpreted score.","Apply tempo control to an uninterpreted score.")),("tempoval",("Reads the current value of the tempo.","Reads the current value of the tempo.")),("timedseq",("Time Variant Sequencer","An event-sequencer in which time can be controlled by a\n    time-pointer. Sequence data are stored into a table.")),("trigger",("Informs when a krate signal crosses a threshold.","Informs when a krate signal crosses a threshold.")),("trigseq",("Accepts a trigger signal as input and outputs a group of values.","Accepts a trigger signal as input and outputs a group of values.")),("vactrol",("Envelope follower unit generator.","Envelope follower unit generator emmulating a Perkin Elmer\n      Vactrole VTL5C3/2.")),("wiiconnect",("Reads data from a number of external Nintendo Wiimote controllers.","Opens and at control-rate polls up to four external Nintendo Wiimote controllers.")),("wiidata",("Reads data fields from a number of external Nintendo Wiimote controllers.","Reads data fields from upto four external Nintendo Wiimote controllers.")),("wiirange",("Sets scaling and range limits for certain Wiimote fields.","Sets scaling and range limits for certain Wiimote fields.")),("wiisend",("Sends data to one of a number of external Nintendo Wiimote controllers.","Sends data to one of a number of external Nintendo Wiimote controllers.")),("writescratch",("writes a value into the scratchpad of the instance of an instrument.","The writescratch opcode writes one of four\n      scalar values to be stored in the instance of an instrument.")),("xyin",("Sense the cursor position in an output window","Sense the cursor position in an output window. When xyin is called the position of the mouse within the output window is used to reply to the request.  This simple mechanism does mean that only one xyin can be used accurately at once.  The position of the mouse is reported in the output window.")),("pop",("Pops values from the global stack.  Deprecated.","Pops values from the global stack.")),("pop_f",("Pops an f-sig frame from the global stack.  Deprecated.","Pops an f-sig frame from the global stack.")),("push",("Pushes a value into the global stack.  Deprecated.","Pushes a value into the global stack.")),("push_f",("Pushes an f-sig frame into the global stack.  Deprecated.","Pushes an f-sig frame into the global stack.")),("stack",("Initializes the stack.  Deprecated.","Initializes and sets the size of the global stack.")),("subinstr",("Creates and runs a numbered instrument instance.","Creates an instance of another instrument and is used as if it were an opcode.")),("subinstrinit",("Creates and runs a numbered instrument instance at init-time.","Same as subinstr, but init-time only and has no output arguments.")),("date",("Returns the number seconds since a base date.","Returns the number seconds since a base date, using the\n      operating system's clock.  The base is 1 January 1970 for Csound\n      using doubles, and 1 January 2010 for versions using floats.\n      On operating systemms with sufficient resolution the date\n      includes fractional seconds.")),("dates",("Returns as a string the date and time specified.","Returns as a string the date and time specified.")),("readclock",("Reads the value of an internal clock.","Reads the value of an internal clock.")),("rtclock",("Read the real time clock from the operating system.","Read the real-time clock from the operating system.")),("timeinstk",("Read absolute time in k-rate cycles.","Read absolute time, in k-rate cycles, since the start of an\n    \tinstance of an instrument. Called at both i-time as well as\n    \tk-time.")),("timeinsts",("Read absolute time in seconds.","Read absolute time, in seconds, since the start of an instance of an instrument.")),("timek",("Read absolute time in k-rate cycles.","Read absolute time, in k-rate cycles, since the start of the performance.")),("times",("Read absolute time in seconds.","Read absolute time, in seconds, since the start of the performance.")),("JackoAudioIn",("Receives an audio signal from a Jack port.","Receives an audio signal from a Jack audio input port \n      inside this instance of Csound, which in turn has \n      received the signal from its connected external Jack \n      audio output port.")),("JackoAudioInConnect",("Creates an audio connection from a Jack port to Csound.","In the orchestra header, creates an audio connection \n      from an external Jack audio output port to a \n      Jack audio input port inside this instance of Csound.")),("JackoAudioOut",("Sends an audio signal to a Jack port.","Sends an audio signal to an internal Jack audio \n      output port, and in turn to its connected external \n      Jack audio input port.")),("JackoAudioOutConnect",("Creates an audio connection from Csound to a Jack port.","In the orchestra header, creates an audio connection \n      from a Jack audio output port inside this instance \n      of Csound to an external Jack audio input port.")),("JackoInit",("Initializes Csound as a Jack client.","Initializes this instance of Csound as a Jack client.")),("JackoMidiInConnect",("Creates a MIDI  connection from a Jack port to Csound.","In the orchestra header, creates a MIDI connection \n      from an external Jack MIDI output port to this instance of Csound.")),("JackoMidiOut",("Sends a MIDI channel message to a Jack port.","Sends a MIDI channel message to a Jack MIDI output port\n      inside this instance of Csound, and in turn to its \n      connected external Jack MIDI input port.")),("JackoMidiOutConnect",("Creates a MIDI connection from Csound to a Jack port.","In the orchestra header, creates a connection \n      from a Jack MIDI output port inside this instance \n      of Csound to an external Jack MIDI input port.")),("JackoNoteOut",("Sends a MIDI channel message to a Jack port.","Sends a MIDI channel message to a Jack MIDI output port\n      inside this instance of Csound, and in turn to its \n      connected external Jack MIDI input port.")),("JackoOn",("Enables or disables all Jack ports.","In the orchestra header, after all Jack connections have been created, enables\n      or disables all Jack input and output opcodes \n      inside this instance of Csound to read or write data.")),("JackoTransport",("Control the Jack transport.","Starts, stops, or repositions the Jack transport.\n      This is useful, e.g., for starting an external sequencer\n      playing to send MIDI messages to Csound.")),("serialBegin",("Open a serial port.","Open a serial port for arduino.")),("serialEnd",("Close a serial port.","Close a serial port for arduino.")),("serialFlush",("Flush data from a serial port.","Flush to the screen any bytes (up to 32k) in the input buffer.  \nNote that these bytes will be cleared from the buffer.\nuse this opcode mainly for debugging messages.\nIf you want to mix debugging and other communication \nmessages over the same port, you will need to manually\nparse the data with the serialRead opcode.")),("serialPrint",("Print data from a serial port.","Print to the screen any bytes (up to 32k) in the input buffer.  \nNote that these bytes will be cleared from the buffer.\nuse this opcode mainly for debugging messages.\nIf you want to mix debugging and other communication \nmessages over the same port, you will need to manually\nparse the data with the serialRead opcode.")),("serialRead",("Read data from a serial port.","Read data from a serial port for arduino.")),("serialWrite",("Write data to a serial port.","Write data to a serial port for arduino.")),("serialWrite_i",("Write data to a serial port.","Write data to a serial port for arduino.")),("ftfree",("Deletes function table.","Deletes function table.")),("ftgen",("Generate a score function table from within the orchestra.","Generate a score function table from within the orchestra.")),("ftgentmp",("Generate a score function table from within the orchestra, which is deleted at the end of the note.","Generate a score function table from within the orchestra,\n    which is optionally deleted at the end of the note.")),("getftargs",("Fill a string variable with the arguments used to create a function table at k-rate.","getftargs writes the arguments used to create a function table to a string variable. getftargs runs both at initialization and performance time.")),("sndload",("Loads a sound file into memory for use by loscilx","sndload loads a sound file into memory for use by loscilx.")),("FLgroup",("A FLTK container opcode that groups child widgets.","A FLTK container opcode that groups child widgets.")),("FLgroupEnd",("Marks the end of a group of FLTK child widgets.","Marks the end of a group of FLTK child widgets.")),("FLpack",("Provides the functionality of compressing and aligning FLTK widgets.","FLpack provides the functionality of compressing and aligning widgets.")),("FLpackEnd",("Marks the end of a group of compressed or aligned FLTK widgets.","Marks the end of a group of compressed or aligned FLTK widgets.")),("FLpanel",("Creates a window that contains FLTK widgets.","Creates a window that contains FLTK widgets.")),("FLpanelEnd",("Marks the end of a group of FLTK widgets contained inside of a window (panel).","Marks the end of a group of FLTK widgets contained inside of a window (panel).")),("FLscroll",("A FLTK opcode that adds scroll bars to an area.","FLscroll adds scroll bars to an area.")),("FLscrollEnd",("A FLTK opcode that marks the end of an area with scrollbars.","A FLTK opcode that marks the end of an area with scrollbars.")),("FLtabs",("Creates a tabbed FLTK interface.","FLtabs is a \226\128\156file card tabs\226\128\157 interface that is useful to display several areas containing widgets in the same windows, alternatively. It must be used together with FLgroup, another container that groups child widgets.")),("FLtabsEnd",("Marks the end of a tabbed FLTK interface.","Marks the end of a tabbed FLTK interface.")),("FLcount",("A FLTK widget opcode that creates a counter.","Allows the user to increase/decrease a value with mouse clicks on a corresponding arrow button.")),("FLjoy",("A FLTK opcode that acts like a joystick.","FLjoy is a squared area that allows the user to modify two output values at the same time. It acts like a joystick.")),("FLknob",("A FLTK widget opcode that creates a knob.","A FLTK widget opcode that creates a knob.")),("FLroller",("A FLTK widget that creates a transversal knob.","FLroller is a sort of knob, but put transversally.")),("FLslider",("Puts a slider into the corresponding FLTK container.","FLslider puts a slider into the corresponding container.")),("FLtext",("A FLTK widget opcode that creates a textbox.","FLtext allows the user to modify a parameter value by directly typing it into a text field.")),("FLbox",("A FLTK widget that displays text inside of a box.","A FLTK widget that displays text inside of a box.")),("FLbutBank",("A FLTK widget opcode that creates a bank of buttons.","A FLTK widget opcode that creates a bank of buttons.")),("FLbutton",("A FLTK widget opcode that creates a button.","A FLTK widget opcode that creates a button.")),("FLcloseButton",("A FLTK widget opcode that creates a button that will close the panel\n      window it is a part of.","A FLTK widget opcode that creates a button that will close the panel\n      window it is a part of.")),("FLexecButton",("A FLTK widget opcode that creates a button that executes a command.","A FLTK widget opcode that creates a button that executes a command. Useful\n      for opening up HTML documentation as About text or to start a separate\n      program from an FLTK widget interface.")),("FLgetsnap",("Retrieves a previously stored FLTK snapshot.","Retrieves a previously stored snapshot (in memory), i.e. sets all valuator to the corresponding values stored in that snaphot.")),("FLhvsBox",("Displays a box with a grid useful for visualizing two-dimensional Hyper Vectorial Synthesis.","FLhvsBox displays a box with a grid useful for visualizing two-dimensional Hyper Vectorial Synthesis.")),("FLhvsBoxSetValue",("Sets the cursor position of a previously-declared FLhvsBox widget.","FLhvsBoxSetValue sets the cursor position of a previously-declared FLhvsBox widget.")),("FLkeyIn",("Reports keys pressed (on alphanumeric keyboard) when an FLTK panel has focus.","FLkeyIn informs about the status of a key pressed by the user on the alphanumeric keyboard when an FLTK panel has got the focus.")),("FLloadsnap",("Loads all snapshots into the memory bank of the current orchestra.","FLloadsnap loads all the snapshots contained in a file into the memory bank of the current orchestra.")),("FLmouse",("Returns the mouse position and the state of the three mouse buttons.","FLmouse returns the coordinates of the mouse position within an FLTK panel and the state of the three mouse buttons.")),("FLprintk",("A FLTK opcode that prints a k-rate value at specified intervals.","FLprintk is similar to printk but shows values of a k-rate signal in a text field instead of on the console.")),("FLprintk2",("A FLTK opcode that prints a new value every time a control-rate variable changes.","FLprintk2 is similar to FLprintk but shows a k-rate variable's value only when it changes.")),("FLrun",("Starts the FLTK widget thread.","Starts the FLTK widget thread.")),("FLsavesnap",("Saves all snapshots currently created into a file.","FLsavesnap saves all snapshots currently created (i.e. the entire memory bank) into a file.")),("FLsetsnap",("Stores the current status of all FLTK valuators into a snapshot location.","FLsetsnap stores the current status of all valuators present in the orchestra into a snapshot location (in memory).")),("FLsetSnapGroup",("Determines the snapshot group for FL valuators.","FLsetSnapGroup determines the snapshot group of valuators declared after it.")),("FLsetVal",("Sets the value of a FLTK valuator at control-rate.","FLsetVal is almost identical to FLsetVal_i. Except it operates at k-rate and it affects the target valuator only when ktrig is set to a non-zero value.")),("FLsetVal_i",("Sets the value of a FLTK valuator to a number provided by the user.","FLsetVal_i forces the value of a valuator to a number provided by the user.")),("FLslidBnk",("A FLTK widget containing a bank of horizontal sliders.","FLslidBnk is a widget containing a bank of horizontal sliders.")),("FLslidBnk2",("A FLTK widget containing a bank of horizontal sliders.","FLslidBnk2 is a widget containing a bank of horizontal sliders.")),("FLslidBnk2Set",("modify the values of a slider bank.","FLslidBnk2Set modifies the values of a slider bank according to an array of values stored in a table.")),("FLslidBnk2Setk",("modify the values of a slider bank.","FLslidBnk2Setk modifies the values of a slider bank according to an array of values stored in a table.")),("FLslidBnkGetHandle",("gets the handle of last slider bank created.","FLslidBnkGetHandle gets the handle of last slider bank created.")),("FLslidBnkSet",("modify the values of a slider bank.","FLslidBnkSet modifies the values of a slider bank according to an array of values stored in a table.")),("FLslidBnkSetk",("modify the values of a slider bank.","FLslidBnkSetk modifies the values of a slider bank according to an array of values stored in a table.")),("FLupdate",("Same as the FLrun opcode.","Same as the FLrun opcode.")),("FLvalue",("Shows the current value of a FLTK valuator.","FLvalue shows current the value of a valuator in a text field.")),("FLvkeybd",("An FLTK widget opcode that creates a virtual keyboard widget.","An FLTK widget opcode that creates a virtual keyboard widget. This must\n      be used in conjunction with the virtual midi keyboard driver for this to\n      operate correctly.  The purpose of this opcode is for making demo versions\n      of MIDI orchestras with the virtual keyboard embedded within the main\n      window.")),("FLvslidBnk",("A FLTK widget containing a bank of vertical sliders.","FLvslidBnk is a widget containing a bank of vertical sliders.")),("FLvslidBnk2",("A FLTK widget containing a bank of vertical sliders.","FLvslidBnk2 is a widget containing a bank of vertical sliders.")),("FLxyin",("Senses the mouse cursor position in a user-defined area inside an FLpanel.","Similar to xyin, sense the mouse cursor position in a user-defined area inside an FLpanel.")),("vphaseseg",("Allows one-dimensional HVS (Hyper-Vectorial Synthesis).","vphaseseg allows one-dimensional HVS (Hyper-Vectorial Synthesis).")),("FLcolor",("A FLTK opcode that sets the primary colors.","Sets the primary colors to RGB values given by the user.")),("FLcolor2",("A FLTK opcode that sets the secondary (selection) color.","FLcolor2 is the same of FLcolor except it affects the secondary (selection) color.")),("FLhide",("Hides the target FLTK widget.","Hides the target FLTK widget, making it invisible.")),("FLlabel",("A FLTK opcode that modifies the appearance of a text label.","Modifies a set of parameters related to the text label appearence of a widget (i.e. size, font, alignment and color of corresponding text).")),("FLsetAlign",("Sets the text alignment of a label of a FLTK widget.","FLsetAlign sets the text alignment of the label of the target widget.")),("FLsetBox",("Sets the appearance of a box surrounding a FLTK widget.","FLsetBox sets the appearance of a box surrounding the target widget.")),("FLsetColor",("Sets the primary color of a FLTK widget.","FLsetColor sets the primary color of the target widget.")),("FLsetColor2",("Sets the secondary (or selection) color of a FLTK widget.","FLsetColor2 sets the secondary (or selection) color of the target widget.")),("FLsetFont",("Sets the font type of a FLTK widget.","FLsetFont sets the font type of the target widget.")),("FLsetPosition",("Sets the position of a FLTK widget.","FLsetPosition sets the position of the target widget according to the ix and iy arguments.")),("FLsetSize",("Resizes a FLTK widget.","FLsetSize resizes the target widget (not the size of its text) according to the iwidth and iheight arguments.")),("FLsetText",("Sets the label of a FLTK widget.","FLsetText sets the label of the target widget to the double-quoted text string provided with the itext argument.")),("FLsetTextColor",("Sets the color of the text label of a FLTK widget.","FLsetTextColor sets the color of the text label of the target widget.")),("FLsetTextSize",("Sets the size of the text label of a FLTK widget.","FLsetTextSize sets the size of the text label of the target widget.")),("FLsetTextType",("Sets some font attributes of the text label of a FLTK widget.","FLsetTextType sets some attributes related to the fonts of the text label of the target widget.")),("FLshow",("Restores the visibility of a previously hidden FLTK widget.","FLshow restores the visibility of a previously hidden widget.")),("clear",("Zeroes a list of audio signals.","clear zeroes a list of audio signals.")),("vincr",("Accumulates audio signals.","vincr increments one audio variable with another signal, i.e. it accumulates output.")),("ampdb",("Returns the amplitude equivalent of the decibel value x.","Returns the amplitude equivalent of the decibel value x. Thus:")),("ampdbfs",("Returns the amplitude equivalent (in 16-bit signed integer scale) of the full scale decibel (dB FS) value x.","Returns the amplitude equivalent of the full scale decibel (dB FS) value x. The logarithmic full scale decibel values will be converted to linear 16-bit signed integer values from \226\136\146\&32,768 to +32,767.")),("dbamp",("Returns the decibel equivalent of the raw amplitude x.","Returns the decibel equivalent of the raw amplitude x.")),("dbfsamp",("Returns the decibel equivalent of the raw amplitude x, relative to full scale amplitude.","Returns the decibel equivalent of the raw amplitude x, relative to full scale amplitude. Full scale is assumed to be 16 bit. New is Csound version 4.10.")),("birnd",("Returns a random number in a bi-polar range.","Returns a random number in a bi-polar range.")),("rnd",("Returns a random number in a unipolar range at the rate given by the input argument.","Returns a random number in a unipolar range at the rate given by the input argument.")),("divz",("Safely divides two numbers.","Safely divides two numbers.")),("mac",("Multiplies and accumulates a- and k-rate signals.","Multiplies and accumulates a- and k-rate signals.")),("maca",("Multiply and accumulate a-rate signals only.","Multiply and accumulate a-rate signals only.")),("polynomial",("Efficiently evaluates a polynomial of arbitrary order.","The polynomial opcode calculates a polynomial with a single a-rate input variable.  The polynomial is a sum of any number of terms in the form kn*x^n where kn is the nth coefficient of the expression.  These coefficients are k-rate values.")),("pow",("Computes one argument to the power of another argument.","Computes xarg to the power of kpow (or ipow) and scales the result by inorm.")),("product",("Multiplies any number of a-rate signals.","Multiplies any number of a-rate signals.")),("sum",("Sums any number of a-rate signals, or array elements.","Sums any number of a-rate signals, or array elements.")),("taninv2",("Returns an arctangent.","Returns the arctangent of iy/ix, ky/kx, or ay/ax.")),("cent",("Calculates a factor to raise/lower a frequency by a given amount of cents.","Calculates a factor to raise/lower a frequency by a given amount of cents.")),("cpsmidinn",("Converts a Midi note number value to cycles-per-second.","Converts a Midi note number value to cycles-per-second.")),("cpsoct",("Converts an octave-point-decimal value to cycles-per-second.","Converts an octave-point-decimal value to cycles-per-second.")),("cpspch",("Converts a pitch-class value to cycles-per-second.","Converts a pitch-class value to cycles-per-second.")),("ftom",("Convert frequency to midi","Convert frequency to midi note number, taking global value\n\t  of A4 into account.")),("mtof",("Convert a midi to frequency","Convert a midi note number value to cycles per second, taking\n\t  global value of A4 into account.")),("mton",("Convert midi note number to string note name","Convert midi note number to string note name, with an accuracy\n\t  of 1 cent.")),("ntom",("Convert note name to midi note number","Convert note name to midi note number. It allows note name to\n\t  include microtones or a deviation in cents.")),("octave",("Calculates a factor to raise/lower a frequency by a given amount of octaves.","Calculates a factor to raise/lower a frequency by a given amount of octaves.")),("octcps",("Converts a cycles-per-second value to octave-point-decimal.","Converts a cycles-per-second value to octave-point-decimal.")),("octmidinn",("Converts a Midi note number value to octave-point-decimal.","Converts a Midi note number value to octave-point-decimal.")),("octpch",("Converts a pitch-class value to octave-point-decimal.","Converts a pitch-class value to octave-point-decimal.")),("pchmidinn",("Converts a Midi note number value to octave point pitch-class units.","Converts a Midi note number value to octave point pitch-class units.")),("pchoct",("Converts an octave-point-decimal value to pitch-class.","Converts an octave-point-decimal value to pitch-class.")),("pchtom",("Convert pch to midi note number","Convert pch to midi note number. pch representation has the form\n\t  Octave.pitchclass,\n\t  pitchclass being a number between 00 and 12.")),("semitone",("Calculates a factor to raise/lower a frequency by a given amount of semitones.","Calculates a factor to raise/lower a frequency by a given amount of semitones.")),("cps2pch",("Converts a pitch-class value into cycles-per-second (Hz) for equal divisions of the octave.","Converts a pitch-class value into cycles-per-second (Hz) for equal divisions of the octave.")),("cpstun",("Returns micro-tuning values at k-rate.","Returns micro-tuning values at k-rate.")),("cpstuni",("Returns micro-tuning values at init-rate.","Returns micro-tuning values at init-rate.")),("cpsxpch",("Converts a pitch-class value into cycles-per-second (Hz) for equal divisions of any interval.","Converts a pitch-class value into cycles-per-second (Hz) for equal divisions of any interval. There is a restriction of no more than 100 equal divisions.")),("aftouch",("Get the current after-touch value for this channel.","Get the current after-touch value for this channel.")),("chanctrl",("Get the current value of a MIDI channel controller.","Get the current value of a controller and optionally map it onto specified range.")),("ctrl14",("Allows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range.","Allows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range.")),("ctrl21",("Allows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range.","Allows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range.")),("ctrl7",("Allows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range.","Allows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range.")),("ctrlinit",("Sets the initial values for a set of MIDI controllers.","Sets the initial values for a set of MIDI controllers.")),("initc14",("Initializes the controllers used to create a 14-bit MIDI value.","Initializes the controllers used to create a 14-bit MIDI value.")),("initc21",("Initializes the controllers used to create a 21-bit MIDI value.","Initializes the controllers used to create a 21-bit MIDI value.")),("initc7",("Initializes the controller used to create a 7-bit MIDI value.","Initializes MIDI controller ictlno with ivalue")),("massign",("Assigns a MIDI channel number to a Csound instrument.","Assigns a MIDI channel number to a Csound instrument.")),("midic14",("Allows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range.","Allows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range.")),("midic21",("Allows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range.","Allows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range.")),("midic7",("Allows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range.","Allows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range.")),("midictrl",("Get the current value (0-127) of a specified MIDI controller.","Get the current value (0-127) of a specified MIDI controller.")),("notnum",("Get a note number from a MIDI event.","Get a note number from a MIDI event.")),("pchbend",("Get the current pitch-bend value for this channel.","Get the current pitch-bend value for this channel.")),("pgmassign",("Assigns an instrument number to a specified MIDI program.","Assigns an instrument number to a specified (or all) MIDI program(s).")),("polyaft",("Returns the polyphonic after-touch pressure of the selected note number.","polyaft returns the polyphonic pressure of the selected note number, optionally mapped to an user-specified range.")),("veloc",("Get the velocity from a MIDI event.","Get the velocity from a MIDI event.")),("nrpn",("Sends a Non-Registered Parameter Number to the MIDI OUT port.","Sends a NPRN (Non-Registered Parameter Number) message to the MIDI OUT port each time one of the input arguments changes.")),("outiat",("Sends MIDI aftertouch messages at i-rate.","Sends MIDI aftertouch messages at i-rate.")),("outic",("Sends MIDI controller output at i-rate.","Sends MIDI controller output at i-rate.")),("outic14",("Sends 14-bit MIDI controller output at i-rate.","Sends 14-bit MIDI controller output at i-rate.")),("outipat",("Sends polyphonic MIDI aftertouch messages at i-rate.","Sends polyphonic MIDI aftertouch messages at i-rate.")),("outipb",("Sends MIDI pitch-bend messages at i-rate.","Sends MIDI pitch-bend messages at i-rate.")),("outipc",("Sends MIDI program change messages at i-rate","Sends MIDI program change messages at i-rate")),("outkat",("Sends MIDI aftertouch messages at k-rate.","Sends MIDI aftertouch messages at k-rate.")),("outkc",("Sends MIDI controller messages at k-rate.","Sends MIDI controller messages at k-rate.")),("outkc14",("Sends 14-bit MIDI controller output at k-rate.","Sends 14-bit MIDI controller output at k-rate.")),("outkpat",("Sends polyphonic MIDI aftertouch messages at k-rate.","Sends polyphonic MIDI aftertouch messages at k-rate.")),("outkpb",("Sends MIDI pitch-bend messages at k-rate.","Sends MIDI pitch-bend messages at k-rate.")),("outkpc",("Sends MIDI program change messages at k-rate.","Sends MIDI program change messages at k-rate.")),("ampmidi",("Get the velocity of the current MIDI event.","Get the velocity of the current MIDI event.")),("ampmidid",("Musically map MIDI velocity to peak amplitude within a specified dynamic range in decibels.","Musically map MIDI velocity to peak amplitude within a specified dynamic range in decibels.")),("cpsmidi",("Get the note number of the current MIDI event, expressed in cycles-per-second.","Get the note number of the current MIDI event, expressed in cycles-per-second.")),("cpsmidib",("Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in cycles-per-second.","Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in cycles-per-second.")),("cpstmid",("Get a MIDI note number (allows customized micro-tuning scales).","This unit is similar to cpsmidi, but allows fully customized micro-tuning scales.")),("octmidi",("Get the note number, in octave-point-decimal units, of the current MIDI event.","Get the note number, in octave-point-decimal units, of the current MIDI event.")),("octmidib",("Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in octave-point-decimal.","Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in octave-point-decimal.")),("pchmidi",("Get the note number of the current MIDI event, expressed in pitch-class units.","Get the note number of the current MIDI event, expressed in pitch-class units.")),("pchmidib",("Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in pitch-class units.","Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in pitch-class units.")),("midiin",("Returns a generic MIDI message received by the MIDI IN port.","Returns a generic MIDI message received by the MIDI IN port")),("midiout",("Sends a generic MIDI message to the MIDI OUT port.","Sends a generic MIDI message to the MIDI OUT port.")),("midiout_i",("Sends a generic MIDI message to the MIDI OUT port.","Sends a generic MIDI message to the MIDI OUT port.")),("release",("Indicates whether a note is in its \226\128\156release\226\128\157 stage.","Provides a way of knowing when a note off message for the current note is received. Only a noteoff message with the same MIDI note number as the one which triggered the note will be reported by release.")),("xtratim",("Extend the duration of real-time generated events.","Extend the duration of real-time generated events and handle their extra life (Usually for usage along with release instead of linenr, linsegr, etc).")),("midion",("Generates MIDI note messages at k-rate.","Generates MIDI note messages at k-rate.")),("midion2",("Sends noteon and noteoff messages to the MIDI OUT port.","Sends noteon and noteoff messages to the MIDI OUT port when triggered by a value different than zero.")),("moscil",("Sends a stream of the MIDI notes.","Sends a stream of the MIDI notes.")),("noteoff",("Send a noteoff message to the MIDI OUT port.","Send a noteoff message to the MIDI OUT port.")),("noteon",("Send a noteon message to the MIDI OUT port.","Send a noteon message to the MIDI OUT port.")),("noteondur",("Sends a noteon and a noteoff MIDI message both with the same channel, number and velocity.","Sends a noteon and a noteoff MIDI message both with the same channel, number and velocity.")),("noteondur2",("Sends a noteon and a noteoff MIDI message both with the same channel, number and velocity.","Sends a noteon and a noteoff MIDI message both with the same channel, number and velocity.")),("midichannelaftertouch",("Gets a MIDI channel's aftertouch value.","midichannelaftertouch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.")),("midichn",("Returns the MIDI channel number from which the note was activated.","midichn returns the MIDI channel number (1 - 16) from which the note was activated. In the case of score notes, it returns 0.")),("midicontrolchange",("Gets a MIDI control change value.","midicontrolchange is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.")),("mididefault",("Changes values, depending on MIDI activation.","mididefault is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.")),("midinoteoff",("Gets a MIDI noteoff value.","midinoteoff is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.")),("midinoteoncps",("Gets a MIDI note number as a cycles-per-second frequency.","midinoteoncps is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.")),("midinoteonkey",("Gets a MIDI note number value.","midinoteonkey is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.")),("midinoteonoct",("Gets a MIDI note number value as octave-point-decimal value.","midinoteonoct is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.")),("midinoteonpch",("Gets a MIDI note number as a pitch-class value.","midinoteonpch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.")),("midipitchbend",("Gets a MIDI pitchbend value.","midipitchbend is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.")),("midipolyaftertouch",("Gets a MIDI polyphonic aftertouch value.","midipolyaftertouch is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.")),("midiprogramchange",("Gets a MIDI program change value.","midiprogramchange is designed to simplify writing instruments that can be used interchangeably for either score or MIDI input, and to make it easier to adapt instruments originally written for score input to work with MIDI input.")),("mclock",("Sends a MIDI CLOCK message.","Sends a MIDI CLOCK message.")),("mrtmsg",("Send system real-time messages to the MIDI OUT port.","Send system real-time messages to the MIDI OUT port.")),("ftgenonce",("Generate a function table from within an instrument definition, without duplication of data.","Enables the creation of function tables entirely inside \n      instrument definitions, without any duplication of data.")),("inleta",("Receives an arate signal into an instrument through a named port.","Receives an arate signal into an instrument through a named port.")),("inletf",("Receives an frate signal (fsig) into an instrument from a named port.","Receives an frate signal (fsig) into an instrument from a named port.")),("inletk",("Receives a krate signal into an instrument from a named port.","Receives a krate signal into an instrument from a named port.")),("inletkid",("Receives a krate signal into an instrument from a named port.","Receives a krate signal into an instrument from a named port.")),("inletv",("Receives an arate array signal into an instrument through a named port.","Receives an arate array signal into an instrument through a named port.")),("outleta",("Sends an arate signal out from an instrument to a named port.","Sends an arate signal out from an instrument to a named port.")),("outletf",("Sends a frate signal (fsig) out from an instrument to a named port.","Sends a frate signal (fsig) out from an instrument to a named port.")),("outletk",("Sends a krate signal out from an instrument to a named port.","Sends a krate signal out from an instrument to a named port.")),("outletkid",("Sends a krate signal out from an instrument to a named port.","Sends a krate signal out from an instrument to a named port.")),("outletv",("Sends an arate array signal out from an instrument to a named port.","Sends an arate array signal out from an instrument to a named port.")),("ktableseg",("Deprecated.","Deprecated. Use the tableseg opcode instead.")),("pvadd",("Reads from a pvoc file and uses the data to perform additive synthesis.","pvadd reads from a pvoc file and uses the data to perform additive synthesis using an internal array of interpolating oscillators. The user supplies the wave table (usually one period of a sine wave), and can choose which analysis bins will be used in the re-synthesis.")),("pvbufread",("Reads from a phase vocoder analysis file and makes the retrieved data available.","pvbufread reads from a pvoc file and makes the retrieved data available to any following pvinterp and pvcross units that appear in an instrument before a subsequent pvbufread (just as lpread and lpreson work together). The data is passed internally and the unit has no output of its own.")),("pvcross",("Applies the amplitudes from one phase vocoder analysis file to the data from a second file.","pvcross applies the amplitudes from one phase vocoder analysis file to the data from a second file and then performs the resynthesis. The data is passed, as described above, from a previously called pvbufread unit. The two k-rate amplitude arguments are used to scale the amplitudes of each files separately before they are added together and used in the resynthesis (see below for further explanation). The frequencies of the first file are not used at all in this process. This unit simply allows for cross-synthesis through the application of the amplitudes of the spectra of one signal to the frequencies of a second signal. Unlike pvinterp, pvcross does allow for the use of the ispecwp as in pvoc and vpvoc.")),("pvinterp",("Interpolates between the amplitudes and frequencies of two phase vocoder analysis files.","pvinterp interpolates between the amplitudes and frequencies, on a bin by bin basis, of two phase vocoder analysis files (one from a previously called pvbufread unit and the other from within its own argument list), allowing for user defined transitions between analyzed sounds. It also allows for general scaling of the amplitudes and frequencies of each file separately before the interpolated values are calculated and sent to the resynthesis routines. The kfmod argument in pvinterp performs its frequency scaling on the frequency values after their derivation from the separate scaling and subsequent interpolation is performed so that this acts as an overall scaling value of the new frequency components.")),("pvoc",("Implements signal reconstruction using an fft-based phase vocoder.","Implements signal reconstruction using an fft-based phase vocoder.")),("pvread",("Reads from a phase vocoder analysis file and returns the frequency and amplitude from a single analysis channel or bin.","pvread reads from a pvoc file and returns the frequency and amplitude from a single analysis channel or bin. The returned values can be used anywhere else in the Csound instrument. For example, one can use them as arguments to an oscillator to synthesize a single component from an analyzed signal or a bank of pvreads can be used to resynthesize the analyzed sound using additive synthesis by passing the frequency and magnitude values to a bank of oscillators.")),("tableseg",("Creates a new function table by making linear segments between values in stored function tables.","tableseg is like linseg but interpolate between values in a stored function tables. The result is a new function table passed internally to any following vpvoc which occurs before a subsequent tableseg (much like lpread/lpreson pairs work). The uses of these are described below under vpvoc.")),("tablexseg",("Creates a new function table by making exponential segments between values in stored function tables.","tablexseg is like expseg but interpolate between values in a stored function tables. The result is a new function table passed internally to any following vpvoc which occurs before a subsequent tablexseg (much like lpread/lpreson pairs work). The uses of these are described below under vpvoc.")),("vpvoc",("Implements signal reconstruction using an fft-based phase vocoder and an extra envelope.","Implements signal reconstruction using an fft-based phase vocoder and an extra envelope.")),("lpfreson",("Resynthesises a signal from the data passed internally by a previous lpread, applying formant shifting.","Resynthesises a signal from the data passed internally by a previous lpread, applying formant shifting.")),("lpinterp",("Computes a new set of poles from the interpolation between two analysis.","Computes a new set of poles from the interpolation between two analysis.")),("lpread",("Reads a control file of time-ordered information frames.","Reads a control file of time-ordered information frames.")),("lpreson",("Resynthesises a signal from the data passed internally by a previous lpread.","Resynthesises a signal from the data passed internally by a previous lpread.")),("lpslot",("Selects the slot to be use by further lp opcodes.","Selects the slot to be use by further lp opcodes.")),("specaddm",("Perform a weighted add of two input spectra.","Perform a weighted add of two input spectra.")),("specdiff",("Finds the positive difference values between consecutive spectral frames.","Finds the positive difference values between consecutive spectral frames.")),("specdisp",("Displays the magnitude values of the spectrum.","Displays the magnitude values of the spectrum.")),("specfilt",("Filters each channel of an input spectrum.","Filters each channel of an input spectrum.")),("spechist",("Accumulates the values of successive spectral frames.","Accumulates the values of successive spectral frames.")),("specptrk",("Estimates the pitch of the most prominent complex tone in the spectrum.","Estimate the pitch of the most prominent complex tone in the spectrum.")),("specscal",("Scales an input spectral datablock with spectral envelopes.","Scales an input spectral datablock with spectral envelopes.")),("specsum",("Sums the magnitudes across all channels of the spectrum.","Sums the magnitudes across all channels of the spectrum.")),("spectrum",("Generate a constant-Q, exponentially-spaced DFT.","Generate a constant-Q, exponentially-spaced DFT across all octaves of a multiply-downsampled control or audio input signal.")),("binit",("PVS tracks to amplitude+frequency conversion.","The binit opcode takes an input containg a TRACKS pv streaming signal (as generated,\n  for instance by partials) and converts it into a equal-bandwidth bin-frame containing amplitude\n  and frequency pairs (PVS_AMP_FREQ), suitable for overlap-add resynthesis (such as performed by \n  pvsynth) or further PVS streaming phase vocoder signal transformations. For each frequency bin,\n  it will look for a suitable track signal to fill it; if not found, the bin will be empty (0 amplitude).\n  If more than one track fits a certain bin, the one with highest amplitude will be chosen. This\n  means that not all of the input signal is actually 'binned', the operation is lossy. However, in\n  many situations this loss is not perceptually relevant.")),("cudanal",("Generate an fsig from a mono audio source ain, using phase\n      vocoder overlap-add analysis and GPU hardware. Experimental and\n      only available as source code at the moment.","Generate an fsig from a mono audio source ain, using phase vocoder overlap-add analysis and GPU hardware.")),("cudasliding",("Perform sliding phase vocoder algorithm with simplified\n      transformational FM using GPU hardware. Experimental and\n      only available as source code at the moment.","Perform sliding phase vocoder algorithm with simplified\n      transformational FM using GPU hardware.")),("cudasynth",("Synthesis by additive synthesis and inverse FFT. Experimental and\n      only available as source code at the moment.","Synthesis by additive synthesis and inverse FFT.")),("partials",("Partial track spectral analysis.","The partials opcode takes two input PV streaming signals containg AMP_FREQ and AMP_PHASE signals (as generated\n  for instance by pvsifd or in the first case, by pvsanal) and performs partial track analysis,\n  as described in Lazzarini et al, \"Time-stretching using the Instantaneous Frequency Distribution and Partial\n  Tracking\", Proc.of ICMC05, Barcelona. It generates a TRACKS PV streaming signal, containing amplitude, frequency, \n  phase and track ID for each output track. This type of signal will contain a variable number of output tracks,\n  up to the total number of analysis bins contained in the inputs (fftsize/2 + 1 bins). The second input (AMP_PHASE) \n  is optional, as it can take the same signal as the first input. In this case, however, all phase information will \n  be NULL and resynthesis using phase information cannot be performed.")),("pvsadsyn",("Resynthesize using a fast oscillator-bank.","Resynthesize using a fast oscillator-bank.")),("pvsanal",("Generate an fsig from a mono audio source ain, using phase vocoder overlap-add analysis.","Generate an fsig from a mono audio source ain, using phase vocoder overlap-add analysis.")),("pvsarp",("Arpeggiate the spectral components of a streaming pv signal.","This opcode arpeggiates spectral components, by amplifying one bin and attenuating\n    all the others around it. Used with an LFO it will provide a spectral arpeggiator similar to Trevor Wishart's\n    CDP program specarp.")),("pvsbandp",("A band pass filter working in the spectral domain.","Filter the pvoc frames, passing bins whose frequency is within a\n      band, and with linear interpolation for transitional bands.")),("pvsbandr",("A band reject filter working in the spectral domain.","Filter the pvoc frames, rejecting bins whose frequency is within a\n      band, and with linear interpolation for transitional bands.")),("pvsbin",("Obtain the amp and freq values off a PVS signal bin.","Obtain the amp and freq values off a PVS signal bin as k-rate variables.")),("pvsblur",("Average the amp/freq time functions of each analysis channel for\n    a specified time.","Average the amp/freq time functions of each analysis channel for\n    a specified time (truncated to number of frames). As a side-effect\n    the input pvoc stream will be delayed by that amount.")),("pvsbuffer",("This opcode creates and writes to a circular buffer for f-signals (streaming PV signals).","This opcode sets up and writes to a circular buffer of length ilen (secs),\n        giving a handle for the buffer and a time pointer, which holds the\n        current write position (also in seconds). It can be used with one or \n        more pvsbufread opcodes. Writing is circular, wrapping around at the\n        end of the buffer.")),("pvsbufread",("This opcode reads a circular buffer of f-signals (streaming PV signals).","This opcode reads from a circular buffer of length ilen (secs),\n      taking a handle for the buffer and a time pointer, which holds the\n      current read position (also in seconds). It is used in conjunction with a\n      pvsbuffer opocde. \n      Reading is circular, wrapping around at the end of the buffer.")),("pvsbufread2",("This opcode reads a circular buffer of f-signals (streaming PV signals), with binwise additional delays.","This opcode reads from a circular buffer of length ilen (secs),\n      taking a handle for the buffer and a time pointer, which holds the\n      current read position (also in seconds). It is used in conjunction with a pvsbuffer opocde. \n      Reading is circular, wrapping around at the end of the buffer. Extra delay times are taken from\n      a function table, with each point on it defining a delay time in seconds affecting the corresponding bin.")),("pvscale",("Scale the frequency components of a pv stream.","Scale the frequency components of a pv stream, resulting\n      in pitch shift. Output amplitudes can be optionally modified in order\n      to attempt formant preservation.")),("pvscent",("Calculate the spectral centroid of a signal.","Calculate the spectral centroid of a signal from its discrete Fourier transform.")),("pvsceps",("Calculate the cepstrum of a pvs input, optionally liftering coefficients.","")),("pvscross",("Performs cross-synthesis between two source fsigs.","Performs cross-synthesis between two source fsigs.")),("pvsdemix",("Spectral azimuth-based de-mixing of stereo sources.","Spectral azimuth-based de-mixing of stereo sources, with a reverse-panning result. This\n      opcode implements the Azimuth Discrimination and Resynthesis (ADRess) algorithm, developed by\n      Dan Barry (Barry et Al. \"Sound Source Separation Azimuth Discrimination and Resynthesis\". DAFx'04, \n      Univ. of Napoli). The source separation, or de-mixing, is controlled by two parameters: an azimuth\n      position (kpos) and a subspace width (kwidth). The first one is used to locate the spectral peaks of \n      individual sources on a stereo mix, whereas the second widens the 'search space', including/exclufing \n      the peaks around kpos. These two parameters can be used interactively to extract source sounds from\n      a stereo mix. The algorithm is particularly successful with studio recordings where individual instruments\n      occupy individual panning positions; it is, in fact, a reverse-panning algorithm.")),("pvsdiskin",("Read a selected channel from a PVOC-EX analysis file.","Create an fsig stream by reading a selected channel from a PVOC-EX analysis file, with frame interpolation.")),("pvsdisp",("Displays a PVS signal as an amplitude vs. freq graph.","This opcode will display a PVS signal fsig. Uses X11 or  FLTK windows if enabled, else \n\t  (or if -g flag is set) \n\t  displays are approximated in ASCII characters.")),("pvsfilter",("Multiply amplitudes of a pvoc stream by those of a second\npvoc stream, with dynamic scaling.","Multiply amplitudes of a pvoc stream by those of a second\npvoc stream, with dynamic scaling.")),("pvsfread",("Read a selected channel from a PVOC-EX analysis file.","Create an fsig stream by reading a selected channel from a PVOC-EX analysis file loaded into memory, with frame interpolation. Only format 0 files (amplitude+frequency) are currently supported. The operation of this opcode mirrors that of pvoc, but outputs an fsig instead of a resynthesized signal.")),("pvsfreeze",("Freeze the amplitude and frequency time functions of a pv stream according to a control-rate\n      trigger.","This opcodes 'freezes' the evolution of pvs stream by locking into steady amplitude and/or\n      frequency values for each bin. The freezing is controlled, independently for amplitudes and\n      frequencies, by a control-rate trigger, which switches the freezing 'on' if equal to or above\n      1 and 'off' if below 1.")),("pvsftr",("Reads amplitude and/or frequency data from function tables.","Reads amplitude and/or frequency data from function tables.")),("pvsftw",("Writes amplitude and/or frequency data to function tables.","Writes amplitude and/or frequency data to function tables.")),("pvsfwrite",("Write a fsig to a PVOCEX file.","This opcode writes a fsig to a PVOCEX file (which in turn can be read by pvsfread or other programs that support PVOCEX file input).")),("pvsgain",("Scale the amplitude of a pv stream.","Scale the amplitude of a pv stream.")),("pvshift",("Shift the frequency components of a pv stream, stretching/compressing\n      its spectrum.","Shift the frequency components of a pv stream, stretching/compressing\n      its spectrum.")),("pvsifd",("Instantaneous Frequency Distribution, magnitude and phase analysis.","The pvsifd opcode takes an input a-rate signal and performs an Instantaneous Frequency,\n  magnitude and phase analysis, using the STFT and pvsifd (Instantaneous Frequency Distribution),\n  as described in Lazzarini et al, \"Time-stretching using the Instantaneous Frequency Distribution and Partial\n  Tracking\", Proc.of ICMC05, Barcelona. It generates two PV streaming signals, one containing the\n  amplitudes and frequencies (a similar output to pvsanal) and another containing amplitudes and \n  unwrapped phases.")),("pvsin",("Retrieve an fsig from the input software bus; a pvs equivalent to chani.","This opcode retrieves an f-sig from the pvs in software bus, which can be\n      used to get data from an external source, using the Csound 5 API. A channel\n      is created if not already existing. The fsig channel is in that case initialised with\n      the given parameters. It is important to note that the pvs input\n      and output (pvsout opcode) busses are independent and data is not shared between them.")),("pvsinfo",("Get information from a PVOC-EX formatted source.","Get format information about fsrc, whether created by an opcode such as pvsanal, or obtained from a PVOCEX file by pvsfread. This information is available at init time, and can be used to set parameters for other pvs opcodes, and in particular for creating function tables (e.g. for pvsftw), or setting the number of oscillators for pvsadsyn.")),("pvsinit",("Initialise a spectral (f) variable to zero.","Performs the equivalent to an init operation on an f-variable.")),("pvslock",("Frequency lock an input fsig","This opcode searches for spectral peaks and then locks the frequencies around those peaks. This is similar to\n      phase-locking in non-streaming PV processing. It can be used to improve timestretching and pitch-shifting quality in\n      PV processing.")),("pvsmaska",("Modify amplitudes using a function table, with dynamic scaling.","Modify amplitudes of fsrc using  function table, with dynamic scaling.")),("pvsmix",("Mix 'seamlessly' two pv signals.","Mix 'seamlessly' two pv signals.  This opcode combines the\n      most prominent components of two pvoc streams into a single\n      mixed stream.")),("pvsmooth",("Smooth the amplitude and frequency time functions of a pv stream using parallel 1st order\n      lowpass IIR filters with time-varying cutoff frequency.","Smooth the amplitude and frequency time functions of a pv stream using a 1st order\n      lowpass IIR with time-varying cutoff frequency. This opcode uses the same filter \n      as the tone opcode, but this time acting separately on the amplitude and frequency\n      time functions that make up a pv stream. The cutoff frequency parameter runs at the\n      control-rate, but unlike tone and tonek, it is not specified in Hz, but as fractions\n      of 1/2 frame-rate (actually the pv stream sampling rate), which is easier to\n      understand. This means that the highest cutoff frequency is 1 and the lowest 0; the lower\n      the frequency the smoother the functions and more pronounced the effect will be.")),("pvsmorph",("Performs morphing (or interpolation) between two source fsigs.","Performs morphing (or interpolation)  between two source fsigs.")),("pvsosc",("PVS-based oscillator simulator.","Generates periodic signal spectra in AMP-FREQ format, with the option of four wave types:")),("pvsout",("Write a fsig to the pvs output bus.","This opcode writes a fsig to a channel of the pvs output bus. Note that the pvs out bus and\n\t    the pvs in bus are separate and independent. A new channel is created if non-existent.")),("pvspitch",("Track the pitch and amplitude of a PVS signal.","Track the pitch and amplitude of a PVS signal as k-rate variables.")),("pvstanal",("Phase vocoder analysis processing with onset detection/processing.","pvstanal implements phase vocoder analysis by reading function tables\ncontaining sampled-sound sources, with GEN01, and\npvstanal will accept deferred allocation tables.")),("pvstencil",("Transforms a pvoc stream according to a masking function table.","Transforms a pvoc stream according to a masking function table;\n      if the pvoc stream amplitude falls below the value of the function\n      for a specific pvoc channel, it applies a gain to that channel.")),("pvstrace",("Retain only the N loudest bins.","Process a PV stream by retaining only the N bins with the\n      highest amplitude, zeroing the others.")),("pvsvoc",("Combine the spectral envelope of one fsig with the excitation (frequencies) of another.","This opcode provides support for cross-synthesis of amplitudes and frequencies. It takes\n    the amplitudes of one input fsig and combines with frequencies from another. It is a spectral\n    version of the well-known channel vocoder.")),("pvswarp",("Warp the spectral envelope of a PVS signal","Warp the spectral envelope of a PVS signal by means of shifting and scaling.")),("pvsynth",("Resynthesise using a FFT overlap-add.","Resynthesise phase vocoder data (f-signal) using a FFT overlap-add.")),("resyn",("Streaming partial track additive synthesis with cubic phase interpolation with\npitch control and support for timescale-modified input","The resyn opcode takes an input containg a TRACKS pv streaming signal (as generated,\n  for instance by partials). It resynthesises the signal using linear amplitude and cubic phase\n  interpolation to drive a bank of interpolating oscillators with amplitude and pitch scaling controls. Resyn is\n  a modified version of sinsyn, allowing for the resynthesis of data with pitch and timescale changes.")),("sinsyn",("Streaming partial track additive synthesis with cubic phase interpolation","The sinsyn opcode takes an input containg a TRACKS pv streaming signal (as generated,\n  for instance by the partials opcode). It resynthesises the signal using linear amplitude and cubic phase\n  interpolation to drive a bank of interpolating oscillators with amplitude scaling control. sinsyn \n  attempts to preserve the phase of the partials in the original signal and in so doing it does not allow for\n  pitch or timescale modifications of the signal.")),("tabifd",("Instantaneous Frequency Distribution, magnitude and phase analysis.","The tabifd opcode takes an input function table and performs an Instantaneous Frequency,\n  magnitude and phase analysis, using the STFT and tabifd (Instantaneous Frequency Distribution),\n  as described in Lazzarini et al, \"Time-stretching using the Instantaneous Frequency Distribution and Partial\n  Tracking\", Proc.of ICMC05, Barcelona. It generates two PV streaming signals, one containing the\n  amplitudes and frequencies (a similar output to pvsanal) and another containing amplitudes and \n  unwrapped phases.")),("tradsyn",("Streaming partial track additive synthesis","The tradsyn opcode takes an input containg a TRACKS pv streaming signal (as generated,\n      for instance by partials),as described in Lazzarini et al, \"Time-stretching using the Instantaneous Frequency Distribution and Partial\n      Tracking\", Proc.of ICMC05, Barcelona. It resynthesises the signal using linear amplitude and frequency\n      interpolation to drive a bank of interpolating oscillators with amplitude and pitch scaling controls.")),("trcross",("Streaming partial track cross-synthesis.","The trcross opcode takes two inputs containg TRACKS pv streaming signals (as generated,\n      for instance by partials) and cross-synthesises them into a single TRACKS stream. Two\n      different modes of operation are used: mode 0, cross-synthesis by multiplication of\n      the amplitudes of the two inputs and mode 1, cross-synthesis by the substititution of\n      the amplitudes of input 1 by the input 2. Frequencies and phases of input 1 are preserved\n      in the output. The cross-synthesis is done by matching tracks between the two inputs using\n      a 'search interval'. The matching algorithm will look for tracks in the second input that \n      are within the search interval around each track in the first input. This interval can be changed\n      at the control rate. Wider search intervals will find more matches.")),("trfilter",("Streaming partial track filtering.","The trfilter opcode takes an input containg a TRACKS pv streaming signal (as generated,\n      for instance by partials) and filters it using an amplitude response curve stored in\n      a function table. The function table can have any size (no restriction to powers-of-two).\n      The table lookup is done by linear-interpolation. It is possible to create time-varying\n      filter curves by updating the amlitude response table with a table-writing opcode.")),("trhighest",("Extracts the highest-frequency track from a streaming track input signal.","The trhighest opcode takes an input containg TRACKS pv streaming signals (as generated,\n      for instance by partials) and outputs only the highest track. In addition it outputs\n      two k-rate signals, corresponding to the frequency and amplitude of the highest track\n      signal.")),("trlowest",("Extracts the lowest-frequency track from a streaming track input signal.","The trlowest opcode takes an input containg TRACKS pv streaming signals (as generated,\n      for instance by partials) and outputs only the lowest track. In addition it outputs\n      two k-rate signals, corresponding to the frequency and amplitude of the lowest track\n      signal.")),("trmix",("Streaming partial track mixing.","The trmix opcode takes two inputs containg TRACKS pv streaming signals (as generated,\n      for instance by partials) and mixes them into a single TRACKS stream. Tracks will be\n      mixed up to the available space (defined by the original number of FFT bins in \n      the analysed signals). If the sum of the input tracks exceeds this space, the higher-ordered\n      tracks in the second input will be pruned.")),("trscale",("Streaming partial track frequency scaling.","The trscale opcode takes an input containg a TRACKS pv streaming signal (as generated,\n      for instance by partials) and scales all frequencies by a k-rate amount. It can also, optionally,\n      scale the gain of the signal by a k-rate amount (default 1). The result is pitch shifting of\n      the input tracks.")),("trshift",("Streaming partial track frequency scaling.","The trshift opcode takes an input containg a TRACKS pv streaming signal (as generated,\n      for instance by partials) and shifts all frequencies by a k-rate frequency. It can also, optionally,\n      scale the gain of the signal by a k-rate amount (default 1). The result is frequency shifting of\n      the input tracks.")),("trsplit",("Streaming partial track frequency splitting.","The trsplit opcode takes an input containg a TRACKS pv streaming signal (as generated,\n      for instance by partials) and splits it into two signals according to a k-rate frequency 'split point'. \n      The first output will contain all tracks up from 0Hz to the split frequency and the second will \n      contain the tracks from the split frequency up to the Nyquist.\n      It can also, optionally, scale the gain of the output signals by a k-rate amount (default 1). \n      The result is two output signals containing only part of the original spectrum.")),("ATSadd",("uses the data from an ATS analysis file to perform additive synthesis.","ATSadd reads from an ATS analysis file and uses the data to perform additive synthesis using an internal array of interpolating oscillators.")),("ATSaddnz",("uses the data from an ATS analysis file to perform noise resynthesis.","ATSaddnz reads from an ATS analysis file and uses the data to perform additive synthesis using a modified randi function.")),("ATSbufread",("reads data from and ATS data file and stores it in an internal data table of frequency, amplitude pairs.","ATSbufread reads data from and ATS data file and stores it in an internal data table of frequency, amplitude pairs.")),("ATScross",("perform cross synthesis from ATS analysis files.","ATScross uses data from an ATS analysis file and data from an ATSbufread to perform cross synthesis.")),("ATSinfo",("reads data out of the header of an ATS file.","atsinfo reads data out of the header of an ATS file.")),("ATSinterpread",("allows a user to determine the frequency envelope of any ATSbufread.","ATSinterpread allows a user to determine the frequency envelope of any ATSbufread.")),("ATSpartialtap",("returns a frequency, amplitude pair from an ATSbufread opcode.","ATSpartialtap takes a partial number and returns a frequency, amplitude pair. The frequency and amplitude data comes from an ATSbufread opcode.")),("ATSread",("reads data from an ATS file.","ATSread returns the amplitude (kamp) and frequency (kfreq) information of a user specified partial contained in the ATS analysis file at the time indicated by the time pointer ktimepnt.")),("ATSreadnz",("reads data from an ATS file.","ATSreadnz returns the energy (kenergy) of a user specified noise band (1-25 bands) at the time indicated by the time pointer ktimepnt.")),("ATSsinnoi",("uses the data from an ATS analysis file to perform resynthesis.","ATSsinnoi reads data from an ATS data file and uses the information to synthesize sines and noise together.")),("lorismorph",("Morphs two stored sets of bandwidth-enhanced partials\n    and stores a new set of partials representing the morphed\n    sound. The morph is performed by linearly interpolating the\n    parameter envelopes (frequency, amplitude, and bandwidth, or\n    noisiness) of the bandwidth-enhanced partials according to\n    control-rate frequency, amplitude, and bandwidth morphing\n    functions.","lorismorph morphs two stored sets of bandwidth-enhanced\n    partials and stores a new set of partials representing the morphed\n    sound. The morph is performed by linearly interpolating the\n    parameter envelopes (frequency, amplitude, and bandwidth, or\n    noisiness) of the bandwidth-enhanced partials according to\n    control-rate frequency, amplitude, and bandwidth morphing\n    functions.")),("lorisplay",("renders a stored set of bandwidth-enhanced partials using the method of Bandwidth-Enhanced Additive Synthesis implemented in the Loris software, applying control-rate frequency, amplitude, and bandwidth scaling envelopes.","lorisplay renders a stored set of\n    bandwidth-enhanced partials using the method of Bandwidth-Enhanced\n    Additive Synthesis implemented in the Loris software, applying\n    control-rate frequency, amplitude, and bandwidth scaling\n    envelopes.")),("lorisread",("Imports a set of bandwidth-enhanced partials from a SDIF-format\n    data file, applying control-rate frequency, amplitude, and\n    bandwidth scaling envelopes, and stores the modified partials in\n    memory.","lorisread imports a set of bandwidth-enhanced partials from a SDIF-format data file, applying control-rate frequency, amplitude, and bandwidth scaling envelopes, and stores the modified partials in memory.")),("centroid",("Calculate the spectral centroid of a signal.","Calculate the spectral centroid of an audio signal on a given trigger.")),("filescal",("Phase-locked vocoder processing with onset detection/processing, 'tempo-scaling'.","filescal implements phase-locked vocoder\n      processing from disk files, resampling if necessary.")),("mincer",("Phase-locked vocoder processing.","mincer implements phase-locked vocoder processing using function tables\ncontaining sampled-sound sources, with GEN01, and\nmincer will accept deferred allocation tables.")),("mp3scal",("Phase-locked vocoder processing with onset detection/processing, 'tempo-scaling'.","mp3scal implements phase-locked vocoder\n      processing from mp3-format  disk files, resampling if necessary.")),("paulstretch",("Extreme time-stretching algorithm by Nasca Octavian Paul.","The paulstretch opcode is a lightweight\n      implementation of the PaulStretch time-stretching algorithm by\n      Nasca Octavian Paul. It is ideal for timestretching a signal by\n      very large amounts.")),("temposcal",("Phase-locked vocoder processing with onset detection/processing, 'tempo-scaling'.","temposcal implements phase-locked vocoder processing using function tables\n      containing sampled-sound sources, with GEN01, and\n      temposcal will accept deferred allocation tables.")),("strfromurl",("Set string variable to value read from an URL","strfromurl sets a string variable at\n      initialization time to the value found from reading an URL.")),("strget",("Set string variable to value from strset table or string p-field","strget sets a string variable at initialization time to the value stored in strset table at the specified index, or a string p-field from the score. If there is no string defined for the index, the variable is set to an empty string.")),("strset",("Allows a string to be linked with a numeric value.","Allows a string to be linked with a numeric value.")),("puts",("Print a string constant or variable","puts prints a string with an optional newline at the end whenever the trigger signal is positive and changes.")),("sprintf",("printf-style formatted output to a string variable.","sprintf write printf-style formatted output to a string variable, similarly to the C function sprintf(). sprintf runs at i-time only.")),("sprintfk",("printf-style formatted output to a string variable at k-rate.","sprintfk writes printf-style formatted output to a string variable, similarly to the C function sprintf(). sprintfk runs both at initialization and performance time.")),("strcat",("Concatenate strings","Concatenate two strings and store the result in a variable. strcat runs at i-time only. It is allowed for any of the input arguments to be the same as the output variable.")),("strcatk",("Concatenate strings (k-rate)","Concatenate two strings and store the result in a variable. strcatk does the concatenation both at initialization and performance time. It is allowed for any of the input arguments to be the same as the output variable.")),("strcmp",("Compare strings","Compare strings and set the result to -1, 0, or 1 if the first string is less than, equal to, or greater than the second, respectively. strcmp compares at i-time only.")),("strcmpk",("Compare strings","Compare strings and set the result to -1, 0, or 1 if the first string is less than, equal to, or greater than the second, respectively. strcmpk does the comparison both at initialization and performance time.")),("strcpy",("Assign value to a string variable","Assign to a string variable by copying the source which may be a constant or another string variable. strcpy and = copy the string at i-time only.")),("strcpyk",("Assign value to a string variable (k-rate)","Assign to a string variable by copying the source which may be a constant or another string variable. strcpyk does the assignment both at initialization and performance time.")),("strindex",("Return the position of the first occurence of a string in another string","Return the position of the first occurence of S2 in S1, or -1 if not\n      found. If S2 is empty, 0 is returned. strindex runs at init time only.")),("strindexk",("Return the position of the first occurence of a string in another string","Return the position of the first occurence of S2 in S1, or -1 if not\n      found. If S2 is empty, 0 is returned. strindexk runs both at init and\n      performance time.")),("strlen",("Return the length of a string","Return the length of a string, or zero if it is empty. strlen runs at init time only.")),("strlenk",("Return the length of a string","Return the length of a string, or zero if it is empty. strlenk runs both at init and performance time.")),("strrindex",("Return the position of the last occurence of a string in another string","Return the position of the last occurence of S2 in S1, or -1 if not\n      found. If S2 is empty, the length of S1 is returned. strrindex runs\n      at init time only.")),("strrindexk",("Return the position of the last occurence of a string in another string","Return the position of the last occurence of S2 in S1, or -1 if not\n      found. If S2 is empty, the length of S1 is returned. strrindexk runs\n      both at init and performance time.")),("strsub",("Extract a substring","Return a substring of the source string. strsub runs at init time only.")),("strsubk",("Extract a substring","Return a substring of the source string. strsubk runs both at init and\n      performance time.")),("strchar",("Return the ASCII code of a character in a string","Return the ASCII code of the character in Sstr at ipos (defaults to zero\n      which means the first character), or zero if ipos is out of range.\n      strchar runs at init time only.")),("strchark",("Return the ASCII code of a character in a string","Return the ASCII code of the character in Sstr at kpos (defaults to zero\n      which means the first character), or zero if kpos is out of range.\n      strchark runs both at init and performance time.")),("strlower",("Convert a string to lower case","Convert Ssrc to lower case, and write the result to Sdst.\n      strlower runs at init time only.")),("strlowerk",("Convert a string to lower case","Convert Ssrc to lower case, and write the result to Sdst.\n      strlowerk runs both at init and performance time.")),("strtod",("Converts a string to a float (i-rate).","Convert a string to a floating point value. It is also possible to\n    pass an strset index or a string p-field from the score instead of a string\n    argument. If the string cannot be parsed as a floating point or integer number, an init or perf error occurs and the instrument is deactivated.")),("strtodk",("Converts a string to a float (k-rate).","Convert a string to a floating point value at i- or k-rate. It is also possible to pass an strset index or a string p-field from the score instead of a string\n    argument. If the string cannot be parsed as a floating point or integer number, an init or perf error occurs and the instrument is deactivated.")),("strtol",("Converts a string to a signed integer (i-rate).","Convert a string to a signed integer value. It is also possible to\n    pass an strset index or a string p-field from the score instead of a string\n    argument. If the string cannot be parsed as an integer number, an init error occurs and the instrument is deactivated.")),("strtolk",("Converts a string to a signed integer (k-rate).","Convert a string to a signed integer value at i- or k-rate. It is also possible to pass an strset index or a string p-field from the score instead of a string\n    argument. If the string cannot be parsed as an integer number, an init or perf error occurs and the instrument is deactivated.")),("strupper",("Convert a string to upper case","Convert Ssrc to upper case, and write the result to Sdst.\n      strupper runs at init time only.")),("strupperk",("Convert a string to upper case","Convert Ssrc to upper case, and write the result to Sdst.\n      strupperk runs both at init and performance time.")),("vtaba",("Read vectors (from tables -or arrays of vectors).","This opcode reads vectors from tables at a-rate.")),("vtabi",("Read vectors (from tables -or arrays of vectors).","This opcode reads vectors from tables.")),("vtabk",("Read vectors (from tables -or arrays of vectors).","This opcode reads vectors from tables at k-rate.")),("vtable1k",("Read a vector (several scalars simultaneously) from a table.","This opcode reads vectors from tables at k-rate.")),("vtablea",("Read vectors (from tables -or arrays of vectors).","This opcode reads vectors from tables at a-rate.")),("vtablei",("Read vectors (from tables -or arrays of vectors).","This opcode reads vectors from tables.")),("vtablek",("Read vectors (from tables -or arrays of vectors).","This opcode reads vectors from tables at k-rate.")),("vtablewa",("Write vectors (to tables -or arrays of vectors).","This opcode writes vectors to tables at a-rate.")),("vtablewi",("Write vectors (to tables -or arrays of vectors).","This opcode writes vectors to tables at init time.")),("vtablewk",("Write vectors (to tables -or arrays of vectors).","This opcode writes vectors to tables at k-rate.")),("vtabwa",("Write vectors (to tables -or arrays of vectors).","This opcode writes vectors to tables at a-rate.")),("vtabwi",("Write vectors (to tables -or arrays of vectors).","This opcode writes vectors to tables at init time.")),("vtabwk",("Write vectors (to tables -or arrays of vectors).","This opcode writes vectors to tables at k-rate.")),("vadd",("Adds a scalar value to a vector in a table.","Adds a scalar value to a vector in a table.")),("vadd_i",("Adds a scalar value to a vector in a table.","Adds a scalar value to a vector in a table.")),("vexp",("Performs power-of operations between a vector and a scalar","Performs power-of operations between a vector and a scalar")),("vexp_i",("Performs power-of operations between a vector and a scalar","Performs power-of operations between a vector and a scalar")),("vmult",("Multiplies a vector in a table by a scalar value.","Multiplies a vector in a table by a scalar value.")),("vmult_i",("Multiplies a vector in a table by a scalar value.","Multiplies a vector in a table by a scalar value.")),("vpow",("Raises each element of a vector to a scalar power.","Raises each element of a vector to a scalar power.")),("vpow_i",("Raises each element of a vector to a scalar power","Raises each element of a vector to a scalar power")),("vaddv",("Performs addition between two vectorial control signals.","Performs addition between two vectorial control signals.")),("vaddv_i",("Performs addition between two vectorial control signals at init time.","Performs addition between two vectorial control signals at init time.")),("vcopy",("Copies between two vectorial control signals","Copies between two vectorial control signals")),("vcopy_i",("Copies a vector from one table to another.","Copies a vector from one table to another.")),("vdivv",("Performs division between two vectorial control signals","Performs division between two vectorial control signals")),("vdivv_i",("Performs division between two vectorial control signals at init time.","Performs division between two vectorial control signals at init time.")),("vexpv",("Performs exponential operations between two vectorial control signals","Performs exponential operations between two vectorial control signals")),("vexpv_i",("Performs exponential operations between two vectorial control signals at init time.","Performs exponential operations between two vectorial control signals at init time.")),("vmap",("Maps elements from a vector according to indexes contained in another vector.","Maps elements from a vector onto another according to the indexes of a this vector.")),("vmultv",("Performs mutiplication between two vectorial control signals","Performs mutiplication between two vectorial control signals")),("vmultv_i",("Performs mutiplication between two vectorial control signals at init time.","Performs mutiplication between two vectorial control signals at init time.")),("vpowv",("Performs power-of operations between two vectorial control signals","Performs power-of operations between two vectorial control signals")),("vpowv_i",("Performs power-of operations between two vectorial control signals at init time.","Performs power-of operations between two vectorial control signals at init time.")),("vsubv",("Performs subtraction between two vectorial control signals","Performs subtraction between two vectorial control signals")),("vsubv_i",("Performs subtraction between two vectorial control signals at init time.","Performs subtraction between two vectorial control signals at init time.")),("vexpseg",("Vectorial envelope generator","Generate exponential vectorial segments")),("vlinseg",("Vectorial envelope generator","Generate linear vectorial segments")),("vlimit",("Limiting and Wrapping Vectorial Signals","Limits elements of vectorial control signals.")),("vmirror",("Limiting and Wrapping Vectorial Signals","'Reflects' elements of vectorial control signals on thresholds.")),("vwrap",("Limiting and Wrapping Vectorial Signals","Wraps elements of vectorial control signals.")),("vdelayk",("k-rate variable time delay.","Variable delay applied to a k-rate signal")),("vecdelay",("Vectorial Control-rate Delay Paths","Generate a sort of 'vectorial' delay")),("vport",("Vectorial Control-rate Delay Paths","Generate a sort of 'vectorial' portamento")),("vrandh",("Generates a vector of random numbers stored into a table, holding the values for a period of time.","Generates a vector of random numbers stored into a table, holding the values for a period of time. Generates a sort of 'vectorial band-limited noise'.")),("vrandi",("Generate a sort of 'vectorial band-limited noise'","Generate a sort of 'vectorial band-limited noise'")),("cell",("Cellular Automaton","One-Dimensional Cellular Automaton. This opcode is the\n         modified version of vcella by Gabriel Maldonado.")),("vcella",("Cellular Automata","Unidimensional Cellular Automata applied to Csound vectors")),("zacl",("Clears one or more variables in the za space.","Clears one or more variables in the za space.")),("zakinit",("Establishes zak space.","Establishes zak space. Must be called only once.")),("zamod",("Modulates one a-rate signal by a second one.","Modulates one a-rate signal by a second one.")),("zar",("Reads from a location in za space at a-rate.","Reads from a location in za space at a-rate.")),("zarg",("Reads from a location in za space at a-rate, adds some gain.","Reads from a location in za space at a-rate, adds some gain.")),("zaw",("Writes to a za variable at a-rate without mixing.","Writes to a za variable at a-rate without mixing.")),("zawm",("Writes to a za variable at a-rate with mixing.","Writes to a za variable at a-rate with mixing.")),("zir",("Reads from a location in zk space at i-rate.","Reads from a location in zk space at i-rate.")),("ziw",("Writes to a zk variable at i-rate without mixing.","Writes to a zk variable at i-rate without mixing.")),("ziwm",("Writes to a zk variable to an i-rate variable with mixing.","Writes to a zk variable to an i-rate variable with mixing.")),("zkcl",("Clears one or more variables in the zk space.","Clears one or more variables in the zk space.")),("zkmod",("Facilitates the modulation of one signal by another.","Facilitates the modulation of one signal by another.")),("zkr",("Reads from a location in zk space at k-rate.","Reads from a location in zk space at k-rate.")),("zkw",("Writes to a zk variable at k-rate without mixing.","Writes to a zk variable at k-rate without mixing.")),("zkwm",("Writes to a zk variable at k-rate with mixing.","Writes to a zk variable at k-rate with mixing.")),("dssiactivate",("Activates or deactivates a DSSI or LADSPA plugin.","dssiactivate is used to activate or deactivate a DSSI or LADSPA plugin. It calles the plugin's activate() and deactivate() functions if they are provided.")),("dssiaudio",("Processes audio using a LADSPA or DSSI plugin.","dssiaudio generates audio by processing an input signal through a LADSPA plugin.")),("dssictls",("Send control information to a LADSPA or DSSI plugin.","dssictls sends control values to a plugin's control port")),("dssiinit",("Loads a DSSI or LADSPA plugin.","dssiinit is used to load a DSSI or LADSPA plugin into memory for use with\n      the other dssi4cs opcodes. Both LADSPA effects and DSSI instruments can be used.")),("dssilist",("Lists all available DSSI and LADSPA plugins.","dssilist checks the variables DSSI_PATH and LADSPA_PATH and lists all plugins available in all plugin libraries there.")),("vstaudio",("VST audio output.","vstaudio and vstaudiog\n      are used for sending and receiving audio from a VST plugin.")),("vstaudiog",("VST audio output.","vstaudio and vstaudiog\n      are used for sending and receiving audio from a VST plugin.")),("vstbankload",("Loads parameter banks to a VST plugin.","vstbankload is used for loading parameter\n      banks to a VST plugin.")),("vstedit",("Opens the GUI editor window for a VST plugin.","vstedit opens the custom GUI editor window for a VST\n      plugin. Note that not all VST plugins have custom GUI editors. It may\n      be necessary to use the --displays command-line option to ensure that\n      Csound handles events from the editor window and displays it properly.")),("vstinfo",("Displays the parameters and the programs of a VST plugin.","vstinfo displays the parameters and the programs of a\n      VST plugin.")),("vstinit",("Load a VST plugin into memory for use with the other vst4cs opcodes.","vstinit is used to load a VST plugin into memory for use with\n      the other vst4cs opcodes. Both VST effects and instruments\n      (synthesizers) can be used.")),("vstmidiout",("Sends MIDI information to a VST plugin.","vstmidiout is used for sending MIDI information to a VST plugin.")),("vstnote",("Sends a MIDI note with definite duration to a VST plugin.","vstnote sends a MIDI note with definite duration to a VST plugin.")),("vstparamset",("Used for parameter comunication to and from a VST plugin.","vstparamset and vstparamget are used for parameter comunication to and from a VST plugin.")),("vstparamget",("Used for parameter comunication to and from a VST plugin.","vstparamset and vstparamget are used for parameter comunication to and from a VST plugin.")),("vstprogset",("Loads parameter banks to a VST plugin.","vstprogset sets one of the programs in an\n      .fxb bank.")),("OSCinit",("Start a listening process for OSC messages to a particular port.","Starts a listening process, which can be used by OSClisten.")),("OSClisten",("Listen for OSC messages to a particular path.","On each k-cycle looks to see if an OSC message has been send to\n      a given path of a given type.")),("OSCraw",("Listen for all OSC messages at a given port.","On each k-cycle looks to see if an OSC message has been received\n      at a given port and copies its contents to a string array. All\n      messages are copied. If a bundle of messages is received, the\n      output array will contain all of the messages in it.")),("OSCsend",("Sends data to other processes using the OSC protocol","Uses the OSC protocol to send message to other OSC listening processes.")),("faustctl",("Adjusts a given control in a Faust DSP instance.","Faustctl will set a given control in a running faust program")),("remoteport",("Defines the port for use with the remote system.","Defines the port for use with the insremot, \n      midremot, insglobal\n      and midglobal opcodes.")),("sockrecv",("Receives data from other processes using the low-level UDP or TCP protocols","Receives directly using the UDP (sockrecv and\n      sockrecvs) or TCP (strecv)\n      protocol onto a network. The data is not subject to any encoding or special\n      routing. The sockrecvs opcode receives a stereo signal\n      interleaved.")),("sockrecvs",("Receives data from other processes using the low-level UDP or TCP protocols","Receives directly using the UDP (sockrecv and\n      sockrecvs) or TCP (strecv)\n      protocol onto a network. The data is not subject to any encoding or special\n      routing. The sockrecvs opcode receives a stereo signal\n      interleaved.")),("sockrecv",("Receives data from other processes using the low-level UDP or TCP protocols","Receives directly using the UDP (sockrecv and\n      sockrecvs) or TCP (strecv)\n      protocol onto a network. The data is not subject to any encoding or special\n      routing. The sockrecvs opcode receives a stereo signal\n      interleaved.")),("strecv",("Receives data from other processes using the low-level UDP or TCP protocols","Receives directly using the UDP (sockrecv and\n      sockrecvs) or TCP (strecv)\n      protocol onto a network. The data is not subject to any encoding or special\n      routing. The sockrecvs opcode receives a stereo signal\n      interleaved.")),("socksend",("Sends data to other processes using the low-level UDP or TCP protocols","Transmits data directly using the UDP (socksend and\n      socksends) or TCP (stsend)\n      protocol onto a network. The data is not subject to any encoding or special\n      routing. The socksends opcode send a stereo signal interleaved.")),("socksends",("Sends data to other processes using the low-level UDP or TCP protocols","Transmits data directly using the UDP (socksend and\n      socksends) or TCP (stsend)\n      protocol onto a network. The data is not subject to any encoding or special\n      routing. The socksends opcode send a stereo signal interleaved.")),("stsend",("Sends data to other processes using the low-level UDP or TCP protocols","Transmits data directly using the UDP (socksend and\n      socksends) or TCP (stsend)\n      protocol onto a network. The data is not subject to any encoding or special\n      routing. The socksends opcode send a stereo signal interleaved.")),("insglobal",("An opcode which can be used to implement a remote\n      orchestra. This opcode will send note events from a source\n      machine to many destinations.","With the insremot and\n      insglobal opcodes you are able to perform\n      instruments on remote machines and control them from a master\n      machine. The remote opcodes are implemented using the\n      master/client model. All the machines involved contain the same\n      orchestra but only the master machine contains the information\n      of the score. During the performance the master machine sends\n      the note events to the clients. The\n      insglobal opcode sends the events to all\n      the machines involved in the remote concert. These machines are\n      determined by the insremot\n      definitions made above the insglobal\n      command. To send events to only one machine use insremot.")),("insremot",("An opcode which can be used to implement a remote\n      orchestra. This opcode will send note events from a source\n      machine to one destination.","With the insremot and insglobal\n      opcodes you are able to perform instruments on remote machines\n      and control them from a master machine. The remote opcodes are\n      implemented using the master/client model. All the machines\n      involved contain the same orchestra but only the master machine\n      contains the information of the score. During the performance\n      the master machine sends the note events to the clients. The\n      insremot opcode will send events from a\n      source machine to one destination if you want to send events to\n      many destinations (broadcast) use the insglobal\n      opcode instead. These two opcodes can be used in combination.")),("midglobal",("An opcode which can be used to implement a remote midi orchestra. This opcode will broadcast the midi events to all the machines involved in the remote concert.","With the midremot and midglobal opcodes you are able to perform instruments on remote machines and control them from a master machine. The remote opcodes are implemented using the master/client model. All the machines involved contain the same orchestra but only the master machine contains the information of the midi score. During the performance the master machine sends the midi events to the clients. The midglobal opcode sends the events to all the machines involved in the remote concert. These machines are determined by the midremot definitions made above the midglobal command. To send events to only one machine use midremot.")),("midremot",("An opcode which can be used to implement a remote midi orchestra. This opcode will send midi events from a source machine to one destination.","With the midremot and midglobal opcodes you are able to perform instruments on remote machines and control them from a master machine. The remote opcodes are implemented using the master/client model. All the machines involved contain the same orchestra but only the master machine contains the information of the midi score. During the performance the master machine sends the midi events to the clients. The midremot opcode will send events from a source machine to one destination if you want to send events to many destinations (broadcast) use the midglobal opcode instead. These two opcodes can be used in combination.")),("MixerClear",("Resets all channels of a buss to 0.","Resets all channels of a buss to 0.")),("MixerGetLevel",("Gets the level of a send to a buss.","Gets the level at which signals from the send are being added to the buss. The actual sending of the signal to the buss \nis performed by the MixerSend opcode.")),("MixerReceive",("Receives an arate signal from a channel of a buss.","Receives an arate signal that has been mixed onto a channel of a buss.")),("MixerSend",("Mixes an arate signal into a channel of a buss.","Mixes an arate signal into a channel of a buss.")),("MixerSetLevel",("Sets the level of a send to a buss.","Sets the level at which signals from the send are added to the buss. The actual sending of the signal to the buss \nis performed by the MixerSend opcode.")),("MixerSetLevel_i",("Sets the level of a send to a buss.","Sets the level at which signals from the send are added to the buss. This opcode, because all parameters are irate, may \n      be used in the orchestra header. The actual sending of the signal to the buss \n      is performed by the MixerSend opcode.")),("link_beat_force",("Forces the global network Ableton Link session to adopt a specific beat number and time.","Forces the global network Ableton Link session to adopt a specific beat number and time, like a conductor stopping an orchestra and immediately starting it again.")),("link_beat_get",("Returns the beat, phase with respect to the local quantum, and current time for the session.","Returns the beat number, phase of the beat with respect to the local quantum of the beat, and current time for the global network Ableton Link session.")),("link_beat_request",("Requests the global network Ableton Link session to adopt a specific beat number and time.","Requests the global network Ableton Link session to adopt a specific beat number and time.")),("link_create",("Creates a peer in an Ableton Link network session.","Creates a peer in an Ableton Link network session. The first peer in a session determines the initial tempo of the session. The value returned must be passed as the first parameter to all subsequent Ableton Link opcode calls for this peer.")),("ableton_link_enable",("Enable or disable synchronization with the Ableton Link session.","Enable or disable synchronization with the global network Ableton Link session tempo and beat.")),("link_is_enabled",("Returns whether or not this peer is synchronized with the global network Ableton Link session.","Returns whether or not the beat and time of his peer are synchronized with the global network Ableton Link session.")),("link_metro",("Returns a trigger that is 1 on the beat and 0 otherwise along with beat, phase, and time for this session of Ableton Link.","Returns a trigger that is 1 on the beat and 0 otherwise along with the beat, phase, and current time of Ableton Link for this session for a given quantum.")),("link_peers",("Returns the number of peers in the session.","Returns the number of peers in the global network Ableton Link session.")),("link_tempo_get",("Returns the current tempo of the global network Ableton Link session.","Returns the current tempo of the global network Ableton Link session.")),("link_tempo_set",("Sets the tempo.","Sets the local tempo if this peer is not enabled; sets the tempo of the global network Ableton Link session if this peer is enabled.")),("imagecreate",("Create an empty image of a given size.","Create an empty image of a given size. Individual pixel values can then be set with. imagegetpixel.")),("imagefree",("Frees memory allocated for a previously loaded or created image.","Frees memory allocated for a previously loaded or created image.")),("imagegetpixel",("Return the RGB pixel values of a previously opened or created image.","Return the RGB pixel values of a previously opened or created image. An image can be loaded with imageload. An empty image can be created with imagecreate.")),("imageload",("Load an image.","Load an image and return a reference to it. Individual pixel values can then be accessed with imagegetpixel.")),("imagesave",("Save a previously created image.","Save a previously created image. An empty image can be created with imagecreate and its pixel RGB values can be set with imagesetpixel. The image will be saved in PNG format.")),("imagesetpixel",("Set the RGB value of a pixel inside a previously opened or created image.","Set the RGB value of a pixel inside a previously opened or created image. An image can be loaded with imageload. An empty image can be created with imagecreate and saved with imagesave.")),("imagesize",("Return the width and height of a previously opened or created image.","Return the width and height of a previously opened or created image. An image can be loaded with imageload. An empty image can be created with imagecreate.")),("directory",("Reads a directory and outputs to a string array a list of file names.","Reads a directory for files and passes them to a string array. Users can set the file type by passing a file extension as a string.")),("fareylen",("returns the length of a Farey Sequence.","This opcode can be used in conjunction with GENfarey.\nIt calculates the length of Farey Sequence Fn. Its length is given by:\n|Fn| = 1 + SUM over n phi(m) \nwhere phi(m) is Euler's totient function, which gives the number of integers \226\137\164 m that are coprime to m.")),("fareyleni",("returns the length of a Farey Sequence.","This opcode can be used in conjunction with GENfarey.\nIt calculates the length of Farey Sequence Fn. Its length is given by:\n|Fn| = 1 + SUM over n phi(m) \nwhere phi(m) is Euler's totient function, which gives the number of integers \226\137\164 m that are coprime to m.")),("modmatrix",("Modulation matrix opcode with optimizations for sparse matrices.","The opcode can be used to let a large number of k-rate modulator\n      variables modulate a large number of k-rate parameter variables,\n      with arbitrary scaling of each modulator-to-parameter\n      connection.  Csound ftables are used to hold both the input\n      (parameter)  variables, the modulator variables, and the scaling\n      coefficients. Output variables are written to another Csound ftable.")),("pwd",("Asks the underlying operating system for the current directory\n      name as a string.","pwd call the operating system to determine\n      the current directory (folder).  pwd runs\n      at i-time only.")),("select",("Select sample value based on audio-rate comparisons.","Select sample value from three based on audio-rate comparisons of\n      two signals.")),("system_i",("Call an external program via the system call","system and system_i call\n    any external command understood by the operating system, similarly\n    to the C function     system(). system_i runs\n    at i-time only, while \n      system runs both at initialization and\n      performance time.")),("system",("Call an external program via the system call","system and system_i call\n    any external command understood by the operating system, similarly\n    to the C function     system(). system_i runs\n    at i-time only, while \n      system runs both at initialization and\n      performance time.")),("tableshuffle",("shuffles the content of a function table so that each element of the source\n      table is put into a different random position.","This opcode can be used in order to shuffle the content of\n      function tables into a random order but without loosing any of\n      the elements. Imagine shuffling a deck of cards. Each element of\n      the table is copied to a different random position. If that\n      position was already chosen before then the next free position\n      is chosen. The length of the table remains the same.")),("tableshufflei",("shuffles the content of a function table so that each element of the source\n      table is put into a different random position.","This opcode can be used in order to shuffle the content of\n      function tables into a random order but without loosing any of\n      the elements. Imagine shuffling a deck of cards. Each element of\n      the table is copied to a different random position. If that\n      position was already chosen before then the next free position\n      is chosen. The length of the table remains the same."))]